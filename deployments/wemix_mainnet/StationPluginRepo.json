{
  "address": "0xc652c3864DDc48F7166fD801c862795Fd5e858ac",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AnyAddressDisallowedForWhoAndWhere",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConditionNotPresentForAnyAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyReleaseMetadata",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPluginSetupInterface",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "latestRelease",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "newRelease",
          "type": "uint8"
        }
      ],
      "name": "InvalidReleaseIncrement",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "where",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "permissionId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "currentCondition",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newCondition",
          "type": "address"
        }
      ],
      "name": "PermissionAlreadyGrantedForDifferentCondition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PermissionsForAnyAddressDisallowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "release",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "build",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "pluginSetup",
          "type": "address"
        }
      ],
      "name": "PluginSetupAlreadyInPreviousRelease",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReleaseDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReleaseZeroNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "where",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "permissionId",
          "type": "bytes32"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "versionHash",
          "type": "bytes32"
        }
      ],
      "name": "VersionHashDoesNotExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "permissionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "here",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "where",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IPermissionCondition",
          "name": "condition",
          "type": "address"
        }
      ],
      "name": "Granted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "release",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "releaseMetadata",
          "type": "bytes"
        }
      ],
      "name": "ReleaseMetadataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "permissionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "here",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "where",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "Revoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "release",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "build",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pluginSetup",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "buildMetadata",
          "type": "bytes"
        }
      ],
      "name": "VersionCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_PERMISSION_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_PERMISSION_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_REPO_PERMISSION_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum PermissionLib.Operation",
              "name": "operation",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "where",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "who",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "condition",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "permissionId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PermissionLib.MultiTargetPermission[]",
          "name": "_items",
          "type": "tuple[]"
        }
      ],
      "name": "applyMultiTargetPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_where",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum PermissionLib.Operation",
              "name": "operation",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "who",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "permissionId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PermissionLib.SingleTargetPermission[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "applySingleTargetPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_release",
          "type": "uint8"
        }
      ],
      "name": "buildCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_release",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_pluginSetup",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_buildMetadata",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_releaseMetadata",
          "type": "bytes"
        }
      ],
      "name": "createVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pluginSetup",
          "type": "address"
        }
      ],
      "name": "getLatestVersion",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "release",
                  "type": "uint8"
                },
                {
                  "internalType": "uint16",
                  "name": "build",
                  "type": "uint16"
                }
              ],
              "internalType": "struct PluginRepo.Tag",
              "name": "tag",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "pluginSetup",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "buildMetadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct PluginRepo.Version",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_release",
          "type": "uint8"
        }
      ],
      "name": "getLatestVersion",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "release",
                  "type": "uint8"
                },
                {
                  "internalType": "uint16",
                  "name": "build",
                  "type": "uint16"
                }
              ],
              "internalType": "struct PluginRepo.Tag",
              "name": "tag",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "pluginSetup",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "buildMetadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct PluginRepo.Version",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tagHash",
          "type": "bytes32"
        }
      ],
      "name": "getVersion",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "release",
                  "type": "uint8"
                },
                {
                  "internalType": "uint16",
                  "name": "build",
                  "type": "uint16"
                }
              ],
              "internalType": "struct PluginRepo.Tag",
              "name": "tag",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "pluginSetup",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "buildMetadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct PluginRepo.Version",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "release",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "build",
              "type": "uint16"
            }
          ],
          "internalType": "struct PluginRepo.Tag",
          "name": "_tag",
          "type": "tuple"
        }
      ],
      "name": "getVersion",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "release",
                  "type": "uint8"
                },
                {
                  "internalType": "uint16",
                  "name": "build",
                  "type": "uint16"
                }
              ],
              "internalType": "struct PluginRepo.Tag",
              "name": "tag",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "pluginSetup",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "buildMetadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct PluginRepo.Version",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_where",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_permissionId",
          "type": "bytes32"
        }
      ],
      "name": "grant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_where",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_permissionId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IPermissionCondition",
          "name": "_condition",
          "type": "address"
        }
      ],
      "name": "grantWithCondition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_where",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_permissionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "isGranted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRelease",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_where",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_permissionId",
          "type": "bytes32"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_release",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_releaseMetadata",
          "type": "bytes"
        }
      ],
      "name": "updateReleaseMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "f97dc15e6d1f74cd3e4f0c0726ba97cc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AnyAddressDisallowedForWhoAndWhere\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConditionNotPresentForAnyAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyReleaseMetadata\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPluginSetupInterface\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"latestRelease\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newRelease\",\"type\":\"uint8\"}],\"name\":\"InvalidReleaseIncrement\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"currentCondition\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newCondition\",\"type\":\"address\"}],\"name\":\"PermissionAlreadyGrantedForDifferentCondition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermissionsForAnyAddressDisallowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"pluginSetup\",\"type\":\"address\"}],\"name\":\"PluginSetupAlreadyInPreviousRelease\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReleaseDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReleaseZeroNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"versionHash\",\"type\":\"bytes32\"}],\"name\":\"VersionHashDoesNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"here\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPermissionCondition\",\"name\":\"condition\",\"type\":\"address\"}],\"name\":\"Granted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"releaseMetadata\",\"type\":\"bytes\"}],\"name\":\"ReleaseMetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"here\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pluginSetup\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"buildMetadata\",\"type\":\"bytes\"}],\"name\":\"VersionCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAINTAINER_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_REPO_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"_items\",\"type\":\"tuple[]\"}],\"name\":\"applyMultiTargetPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_where\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.SingleTargetPermission[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"applySingleTargetPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_release\",\"type\":\"uint8\"}],\"name\":\"buildCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_release\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_pluginSetup\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_buildMetadata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_releaseMetadata\",\"type\":\"bytes\"}],\"name\":\"createVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pluginSetup\",\"type\":\"address\"}],\"name\":\"getLatestVersion\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"}],\"internalType\":\"struct PluginRepo.Tag\",\"name\":\"tag\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"pluginSetup\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"buildMetadata\",\"type\":\"bytes\"}],\"internalType\":\"struct PluginRepo.Version\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_release\",\"type\":\"uint8\"}],\"name\":\"getLatestVersion\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"}],\"internalType\":\"struct PluginRepo.Tag\",\"name\":\"tag\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"pluginSetup\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"buildMetadata\",\"type\":\"bytes\"}],\"internalType\":\"struct PluginRepo.Version\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tagHash\",\"type\":\"bytes32\"}],\"name\":\"getVersion\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"}],\"internalType\":\"struct PluginRepo.Tag\",\"name\":\"tag\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"pluginSetup\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"buildMetadata\",\"type\":\"bytes\"}],\"internalType\":\"struct PluginRepo.Version\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"}],\"internalType\":\"struct PluginRepo.Tag\",\"name\":\"_tag\",\"type\":\"tuple\"}],\"name\":\"getVersion\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"}],\"internalType\":\"struct PluginRepo.Tag\",\"name\":\"tag\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"pluginSetup\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"buildMetadata\",\"type\":\"bytes\"}],\"internalType\":\"struct PluginRepo.Version\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_permissionId\",\"type\":\"bytes32\"}],\"name\":\"grant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_permissionId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IPermissionCondition\",\"name\":\"_condition\",\"type\":\"address\"}],\"name\":\"grantWithCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_permissionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"isGranted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRelease\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_permissionId\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_release\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_releaseMetadata\",\"type\":\"bytes\"}],\"name\":\"updateReleaseMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aragon Association - 2020 - 2023\",\"errors\":{\"InvalidReleaseIncrement(uint8,uint8)\":[{\"params\":{\"latestRelease\":\"The latest release number.\",\"newRelease\":\"The new release number.\"}}],\"PermissionAlreadyGrantedForDifferentCondition(address,address,bytes32,address,address)\":[{\"details\":\"This makes sure that condition on the same permission can not be overwriten by a different condition.\",\"params\":{\"currentCondition\":\"The current condition set for permissionId.\",\"newCondition\":\"The new condition it tries to set for permissionId.\",\"permissionId\":\"The permission identifier.\",\"where\":\"The address of the target contract to grant `_who` permission to.\",\"who\":\"The address (EOA or contract) to which the permission has already been granted.\"}}],\"PluginSetupAlreadyInPreviousRelease(uint8,uint16,address)\":[{\"params\":{\"build\":\"The build number of the already existing plugin setup.\",\"pluginSetup\":\"The plugin setup contract address.\",\"release\":\"The release number of the already existing plugin setup.\"}}],\"Unauthorized(address,address,bytes32)\":[{\"params\":{\"permissionId\":\"The permission identifier.\",\"where\":\"The context in which the authorization reverted.\",\"who\":\"The address (EOA or contract) missing the permission.\"}}],\"VersionHashDoesNotExist(bytes32)\":[{\"params\":{\"versionHash\":\"The tag hash.\"}}]},\"events\":{\"ReleaseMetadataUpdated(uint8,bytes)\":{\"params\":{\"release\":\"The release number.\",\"releaseMetadata\":\"The release metadata URI.\"}},\"VersionCreated(uint8,uint16,address,bytes)\":{\"params\":{\"build\":\"The build number.\",\"buildMetadata\":\"The build metadata URI.\",\"pluginSetup\":\"The address of the plugin setup contract.\",\"release\":\"The release number.\"}}},\"kind\":\"dev\",\"methods\":{\"applyMultiTargetPermissions((uint8,address,address,address,bytes32)[])\":{\"params\":{\"_items\":\"The array of multi-targeted permission operations to apply.\"}},\"applySingleTargetPermissions(address,(uint8,address,bytes32)[])\":{\"params\":{\"_where\":\"The address of the single target contract.\",\"items\":\"The array of single-targeted permission operations to apply.\"}},\"buildCount(uint8)\":{\"params\":{\"_release\":\"The release number.\"},\"returns\":{\"_0\":\"The number of builds of this release.\"}},\"constructor\":{\"details\":\"Used to disallow initializing the implementation contract by an attacker for extra safety.\"},\"createVersion(uint8,address,bytes,bytes)\":{\"params\":{\"_buildMetadata\":\"The build metadata URI.\",\"_pluginSetupAddress\":\"The address of the plugin setup contract.\",\"_release\":\"The release number.\",\"_releaseMetadata\":\"The release metadata URI.\"}},\"getLatestVersion(address)\":{\"params\":{\"_pluginSetup\":\"The plugin setup address\"},\"returns\":{\"_0\":\"The latest version associated with the plugin Setup.\"}},\"getLatestVersion(uint8)\":{\"params\":{\"_release\":\"The release number.\"},\"returns\":{\"_0\":\"The latest version of this release.\"}},\"getVersion((uint8,uint16))\":{\"params\":{\"_tag\":\"The version tag.\"},\"returns\":{\"_0\":\"The version associated with the tag.\"}},\"getVersion(bytes32)\":{\"params\":{\"_tagHash\":\"The tag hash.\"},\"returns\":{\"_0\":\"The version associated with a tag hash.\"}},\"grant(address,address,bytes32)\":{\"details\":\"Requires the `ROOT_PERMISSION_ID` permission.Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\",\"params\":{\"_permissionId\":\"The permission identifier.\",\"_where\":\"The address of the target contract for which `_who` receives permission.\",\"_who\":\"The address (EOA or contract) receiving the permission.\"}},\"grantWithCondition(address,address,bytes32,address)\":{\"details\":\"Requires the `ROOT_PERMISSION_ID` permissionNote, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\",\"params\":{\"_condition\":\"The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.\",\"_permissionId\":\"The permission identifier.\",\"_where\":\"The address of the target contract for which `_who` receives permission.\",\"_who\":\"The address (EOA or contract) receiving the permission.\"}},\"initialize(address)\":{\"details\":\"This method is required to support [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822).\"},\"isGranted(address,address,bytes32,bytes)\":{\"params\":{\"_data\":\"The optional data passed to the `PermissionCondition` registered.\",\"_permissionId\":\"The permission identifier.\",\"_where\":\"The address of the target contract for which `_who` receives permission.\",\"_who\":\"The address (EOA or contract) for which the permission is checked.\"},\"returns\":{\"_0\":\"Returns true if `_who` has the permissions on the target contract via the specified permission identifier.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"revoke(address,address,bytes32)\":{\"details\":\"Requires the `ROOT_PERMISSION_ID` permission.Note, that revoking permissions with `_who` or `_where` equal to `ANY_ADDR` does not revoke other permissions with specific `_who` and `_where` addresses that exist in parallel.\",\"params\":{\"_permissionId\":\"The permission identifier.\",\"_where\":\"The address of the target contract for which `_who` loses permission.\",\"_who\":\"The address (EOA or contract) losing the permission.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"The ID of the interface.\"},\"returns\":{\"_0\":\"Returns `true` if the interface is supported.\"}},\"updateReleaseMetadata(uint8,bytes)\":{\"params\":{\"_release\":\"The release number.\",\"_releaseMetadata\":\"The release metadata URI.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"latestRelease\":{\"details\":\"The maximum release number is 255.\"}},\"title\":\"PluginRepo\",\"version\":1},\"userdoc\":{\"errors\":{\"AnyAddressDisallowedForWhoAndWhere()\":[{\"notice\":\"Thrown for permission grants where `who` and `where` are both `ANY_ADDR`.\"}],\"ConditionNotPresentForAnyAddress()\":[{\"notice\":\"Thrown for permission grants where `who` or `where` is `ANY_ADDR`, but no condition is present.\"}],\"EmptyReleaseMetadata()\":[{\"notice\":\"Thrown if the metadata URI is empty.\"}],\"InvalidPluginSetupInterface()\":[{\"notice\":\"Thrown if a plugin setup contract does not inherit from `PluginSetup`.\"}],\"InvalidReleaseIncrement(uint8,uint8)\":[{\"notice\":\"Thrown if a release number is incremented by more than one.\"}],\"PermissionAlreadyGrantedForDifferentCondition(address,address,bytes32,address,address)\":[{\"notice\":\"Thrown if a permission has been already granted with a different condition.\"}],\"PermissionsForAnyAddressDisallowed()\":[{\"notice\":\"Thrown for `ROOT_PERMISSION_ID` or `EXECUTE_PERMISSION_ID` permission grants where `who` or `where` is `ANY_ADDR`.\"}],\"PluginSetupAlreadyInPreviousRelease(uint8,uint16,address)\":[{\"notice\":\"Thrown if the same plugin setup contract exists already in a previous releases.\"}],\"ReleaseDoesNotExist()\":[{\"notice\":\"Thrown if release does not exist.\"}],\"ReleaseZeroNotAllowed()\":[{\"notice\":\"Thrown if a release number is zero.\"}],\"Unauthorized(address,address,bytes32)\":[{\"notice\":\"Thrown if a call is unauthorized.\"}],\"VersionHashDoesNotExist(bytes32)\":[{\"notice\":\"Thrown if a version does not exist.\"}]},\"events\":{\"Granted(bytes32,address,address,address,address)\":{\"notice\":\"Emitted when a permission `permission` is granted in the context `here` to the address `_who` for the contract `_where`.\"},\"ReleaseMetadataUpdated(uint8,bytes)\":{\"notice\":\"Thrown when a release's metadata was updated.\"},\"Revoked(bytes32,address,address,address)\":{\"notice\":\"Emitted when a permission `permission` is revoked in the context `here` from the address `_who` for the contract `_where`.\"},\"VersionCreated(uint8,uint16,address,bytes)\":{\"notice\":\"Thrown if the same plugin setup exists in previous releases.\"}},\"kind\":\"user\",\"methods\":{\"MAINTAINER_PERMISSION_ID()\":{\"notice\":\"The ID of the permission required to call the `createVersion` function.\"},\"ROOT_PERMISSION_ID()\":{\"notice\":\"The ID of the permission required to call the `grant`, `grantWithCondition`, `revoke`, and `bulk` function.\"},\"UPGRADE_REPO_PERMISSION_ID()\":{\"notice\":\"The ID of the permission required to call the `createVersion` function.\"},\"applyMultiTargetPermissions((uint8,address,address,address,bytes32)[])\":{\"notice\":\"Applies an array of permission operations on multiple target contracts `items[i].where`.\"},\"applySingleTargetPermissions(address,(uint8,address,bytes32)[])\":{\"notice\":\"Applies an array of permission operations on a single target contracts `_where`.\"},\"buildCount(uint8)\":{\"notice\":\"Gets the total number of builds for a given release number.\"},\"createVersion(uint8,address,bytes,bytes)\":{\"notice\":\"Creates a new plugin version as the latest build for an existing release number or the first build for a new release number for the provided `PluginSetup` contract address and metadata.\"},\"getLatestVersion(address)\":{\"notice\":\"Returns the latest version for a given plugin setup.\"},\"getLatestVersion(uint8)\":{\"notice\":\"Returns the latest version for a given release number.\"},\"getVersion((uint8,uint16))\":{\"notice\":\"Returns the version associated with a tag.\"},\"getVersion(bytes32)\":{\"notice\":\"Returns the version for a tag hash.\"},\"grant(address,address,bytes32)\":{\"notice\":\"Grants permission to an address to call methods in a contract guarded by an auth modifier with the specified permission identifier.\"},\"grantWithCondition(address,address,bytes32,address)\":{\"notice\":\"Grants permission to an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier if the referenced condition permits it.\"},\"initialize(address)\":{\"notice\":\"Initializes the contract by - initializing the permission manager - granting the `MAINTAINER_PERMISSION_ID` permission to the initial owner.\"},\"isGranted(address,address,bytes32,bytes)\":{\"notice\":\"Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\"},\"latestRelease()\":{\"notice\":\"The ID of the latest release.\"},\"revoke(address,address,bytes32)\":{\"notice\":\"Revokes permission from an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Checks if this or the parent contract supports an interface by its ID.\"},\"updateReleaseMetadata(uint8,bytes)\":{\"notice\":\"Updates the metadata for release with content `@fromHex(_releaseMetadata)`.\"}},\"notice\":\"The plugin repository contract required for managing and publishing different plugin versions within the Aragon DAO framework.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/framework/plugin/repo/PluginRepo.sol\":\"PluginRepo\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165CheckerUpgradeable {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165Upgradeable).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x7493c62dd0335284327a6cce7bd29aaa47bebb761e4e01ab4b031563f977bc32\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x0812bc73d6e30558840122fa48d6f64ae978ccc1b1fc42e616bac190c6360f46\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/core/dao/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title IDAO\\n/// @author Aragon Association - 2022-2023\\n/// @notice The interface required for DAOs within the Aragon App DAO framework.\\ninterface IDAO {\\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\\n    /// @param to The address to call.\\n    /// @param value The native token value to be sent with the call.\\n    /// @param data The bytes-encoded function selector and calldata for the call.\\n    struct Action {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the contract.\\n    /// @param _who The address of a EOA or contract to give the permissions.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if the address has permission, false if not.\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) external view returns (bool);\\n\\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\\n    /// @param _metadata The IPFS hash of the new metadata object.\\n    function setMetadata(bytes calldata _metadata) external;\\n\\n    /// @notice Emitted when the DAO metadata is updated.\\n    /// @param metadata The IPFS hash of the new metadata object.\\n    event MetadataSet(bytes metadata);\\n\\n    /// @notice Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\\n    /// @param _actions The array of actions.\\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\\n    /// @return The array of results obtained from the executed actions in `bytes`.\\n    /// @return The resulting failure map containing the actions have actually failed.\\n    function execute(\\n        bytes32 _callId,\\n        Action[] memory _actions,\\n        uint256 _allowFailureMap\\n    ) external returns (bytes[] memory, uint256);\\n\\n    /// @notice Emitted when a proposal is executed.\\n    /// @param actor The address of the caller.\\n    /// @param callId The ID of the call.\\n    /// @param actions The array of actions executed.\\n    /// @param allowFailureMap The allow failure map encoding which actions are allowed to fail.\\n    /// @param failureMap The failure map encoding which actions have failed.\\n    /// @param execResults The array with the results of the executed actions.\\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\\n    event Executed(\\n        address indexed actor,\\n        bytes32 callId,\\n        Action[] actions,\\n        uint256 allowFailureMap,\\n        uint256 failureMap,\\n        bytes[] execResults\\n    );\\n\\n    /// @notice Emitted when a standard callback is registered.\\n    /// @param interfaceId The ID of the interface.\\n    /// @param callbackSelector The selector of the callback function.\\n    /// @param magicNumber The magic number to be registered for the callback function selector.\\n    event StandardCallbackRegistered(bytes4 interfaceId, bytes4 callbackSelector, bytes4 magicNumber);\\n\\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\\n    /// @param _token The address of the token or address(0) in case of the native token.\\n    /// @param _amount The amount of tokens to deposit.\\n    /// @param _reference The reference describing the deposit reason.\\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\\n\\n    /// @notice Emitted when a token deposit has been made to the DAO.\\n    /// @param sender The address of the sender.\\n    /// @param token The address of the deposited token.\\n    /// @param amount The amount of tokens deposited.\\n    /// @param _reference The reference describing the deposit reason.\\n    event Deposited(address indexed sender, address indexed token, uint256 amount, string _reference);\\n\\n    /// @notice Emitted when a native token deposit has been made to the DAO.\\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\\n    /// @param sender The address of the sender.\\n    /// @param amount The amount of native tokens deposited.\\n    event NativeTokenDeposited(address sender, uint256 amount);\\n\\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\\n    /// @param _trustedForwarder The trusted forwarder address.\\n    function setTrustedForwarder(address _trustedForwarder) external;\\n\\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\\n    /// @return The trusted forwarder address.\\n    function getTrustedForwarder() external view returns (address);\\n\\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\\n    /// @param forwarder the new forwarder address.\\n    event TrustedForwarderSet(address forwarder);\\n\\n    /// @notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _signatureValidator The address of the signature validator.\\n    function setSignatureValidator(address _signatureValidator) external;\\n\\n    /// @notice Emitted when the signature validator address is updated.\\n    /// @param signatureValidator The address of the signature validator.\\n    event SignatureValidatorSet(address signatureValidator);\\n\\n    /// @notice Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _hash The hash of the data to be signed.\\n    /// @param _signature The signature byte array associated with `_hash`.\\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\\n\\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @param _callbackSelector The selector of the callback function.\\n    /// @param _magicNumber The magic number to be registered for the function signature.\\n    function registerStandardCallback(bytes4 _interfaceId, bytes4 _callbackSelector, bytes4 _magicNumber) external;\\n}\\n\",\"keccak256\":\"0xf4951ef4ea5ceef539e9d824379e0a5d6aa306858102277dcb1029735318f2f8\",\"license\":\"AGPL-3.0-or-later\"},\"src/core/permission/IPermissionCondition.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title IPermissionCondition\\n/// @author Aragon Association - 2021-2023\\n/// @notice This interface can be implemented to support more customary permissions depending on on- or off-chain state, e.g., by querying token ownershop or a secondary condition, respectively.\\ninterface IPermissionCondition {\\n    /// @notice This method is used to check if a call is permitted.\\n    /// @param _where The address of the target contract.\\n    /// @param _who The address (EOA or contract) for which the permissions are checked.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data Optional data passed to the `PermissionCondition` implementation.\\n    /// @return allowed Returns true if the call is permitted.\\n    function isGranted(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes calldata _data\\n    ) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x0579dbc987eb9a325467282561ae84649f2b6e8e9561d8c2831dba78045ccef1\",\"license\":\"AGPL-3.0-or-later\"},\"src/core/permission/PermissionLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title PermissionLib\\n/// @author Aragon Association - 2021-2023\\n/// @notice A library containing objects for permission processing.\\nlibrary PermissionLib {\\n    /// @notice A constant expressing that no condition is applied to a permission.\\n    address public constant NO_CONDITION = address(0);\\n\\n    /// @notice The types of permission operations available in the `PermissionManager`.\\n    /// @param Grant The grant operation setting a permission without a condition.\\n    /// @param Revoke The revoke operation removing a permission (that was granted with or without a condition).\\n    /// @param GrantWithCondition The grant operation setting a permission with a condition.\\n    enum Operation {\\n        Grant,\\n        Revoke,\\n        GrantWithCondition\\n    }\\n\\n    /// @notice A struct containing the information for a permission to be applied on a single target contract without a condition.\\n    /// @param operation The permission operation type.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param permissionId The permission identifier.\\n    struct SingleTargetPermission {\\n        Operation operation;\\n        address who;\\n        bytes32 permissionId;\\n    }\\n\\n    /// @notice A struct containing the information for a permission to be applied on multiple target contracts, optionally, with a condition.\\n    /// @param operation The permission operation type.\\n    /// @param where The address of the target contract for which `who` receives permission.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param condition The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.\\n    /// @param permissionId The permission identifier.\\n    struct MultiTargetPermission {\\n        Operation operation;\\n        address where;\\n        address who;\\n        address condition;\\n        bytes32 permissionId;\\n    }\\n}\\n\",\"keccak256\":\"0x9b27fa8990e0f1623055187b8ade9363a6c8a1f15aab900e3a6e5cb312545c02\",\"license\":\"AGPL-3.0-or-later\"},\"src/core/permission/PermissionManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./IPermissionCondition.sol\\\";\\nimport \\\"./PermissionLib.sol\\\";\\n\\n/// @title PermissionManager\\n/// @author Aragon Association - 2021-2023\\n/// @notice The abstract permission manager used in a DAO, its associated plugins, and other framework-related components.\\nabstract contract PermissionManager is Initializable {\\n    /// @notice The ID of the permission required to call the `grant`, `grantWithCondition`, `revoke`, and `bulk` function.\\n    bytes32 public constant ROOT_PERMISSION_ID = keccak256(\\\"ROOT_PERMISSION\\\");\\n\\n    /// @notice A special address encoding permissions that are valid for any address `who` or `where`.\\n    address internal constant ANY_ADDR = address(type(uint160).max);\\n\\n    /// @notice A special address encoding if a permissions is not set and therefore not allowed.\\n    address internal constant UNSET_FLAG = address(0);\\n\\n    /// @notice A special address encoding if a permission is allowed.\\n    address internal constant ALLOW_FLAG = address(2);\\n\\n    /// @notice A mapping storing permissions as hashes (i.e., `permissionHash(where, who, permissionId)`) and their status encoded by an address (unset, allowed, or redirecting to a `PermissionCondition`).\\n    mapping(bytes32 => address) internal permissionsHashed;\\n\\n    /// @notice Thrown if a call is unauthorized.\\n    /// @param where The context in which the authorization reverted.\\n    /// @param who The address (EOA or contract) missing the permission.\\n    /// @param permissionId The permission identifier.\\n    error Unauthorized(address where, address who, bytes32 permissionId);\\n\\n    /// @notice Thrown if a permission has been already granted with a different condition.\\n    /// @dev This makes sure that condition on the same permission can not be overwriten by a different condition.\\n    /// @param where The address of the target contract to grant `_who` permission to.\\n    /// @param who The address (EOA or contract) to which the permission has already been granted.\\n    /// @param permissionId The permission identifier.\\n    /// @param currentCondition The current condition set for permissionId.\\n    /// @param newCondition The new condition it tries to set for permissionId.\\n    error PermissionAlreadyGrantedForDifferentCondition(\\n        address where,\\n        address who,\\n        bytes32 permissionId,\\n        address currentCondition,\\n        address newCondition\\n    );\\n\\n    /// @notice Thrown for permission grants where `who` or `where` is `ANY_ADDR`, but no condition is present.\\n    error ConditionNotPresentForAnyAddress();\\n\\n    /// @notice Thrown for `ROOT_PERMISSION_ID` or `EXECUTE_PERMISSION_ID` permission grants where `who` or `where` is `ANY_ADDR`.\\n    error PermissionsForAnyAddressDisallowed();\\n\\n    /// @notice Thrown for permission grants where `who` and `where` are both `ANY_ADDR`.\\n    error AnyAddressDisallowedForWhoAndWhere();\\n\\n    /// @notice Emitted when a permission `permission` is granted in the context `here` to the address `_who` for the contract `_where`.\\n    /// @param permissionId The permission identifier.\\n    /// @param here The address of the context in which the permission is granted.\\n    /// @param where The address of the target contract for which `_who` receives permission.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param condition The address `ALLOW_FLAG` for regular permissions or, alternatively, the `PermissionCondition` to be used.\\n    event Granted(\\n        bytes32 indexed permissionId,\\n        address indexed here,\\n        address where,\\n        address indexed who,\\n        IPermissionCondition condition\\n    );\\n\\n    /// @notice Emitted when a permission `permission` is revoked in the context `here` from the address `_who` for the contract `_where`.\\n    /// @param permissionId The permission identifier.\\n    /// @param here The address of the context in which the permission is revoked.\\n    /// @param where The address of the target contract for which `_who` loses permission.\\n    /// @param who The address (EOA or contract) losing the permission.\\n    event Revoked(\\n        bytes32 indexed permissionId,\\n        address indexed here,\\n        address where,\\n        address indexed who\\n    );\\n\\n    /// @notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through this permission manager.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    modifier auth(bytes32 _permissionId) {\\n        _auth(_permissionId);\\n        _;\\n    }\\n\\n    /// @notice Initialization method to set the initial owner of the permission manager.\\n    /// @dev The initial owner is granted the `ROOT_PERMISSION_ID` permission.\\n    /// @param _initialOwner The initial owner of the permission manager.\\n    function __PermissionManager_init(address _initialOwner) internal onlyInitializing {\\n        _initializePermissionManager(_initialOwner);\\n    }\\n\\n    /// @notice Grants permission to an address to call methods in a contract guarded by an auth modifier with the specified permission identifier.\\n    /// @dev Requires the `ROOT_PERMISSION_ID` permission.\\n    /// @param _where The address of the target contract for which `_who` receives permission.\\n    /// @param _who The address (EOA or contract) receiving the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @dev Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\\n    function grant(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        _grant(_where, _who, _permissionId);\\n    }\\n\\n    /// @notice Grants permission to an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier if the referenced condition permits it.\\n    /// @dev Requires the `ROOT_PERMISSION_ID` permission\\n    /// @param _where The address of the target contract for which `_who` receives permission.\\n    /// @param _who The address (EOA or contract) receiving the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _condition The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.\\n    /// @dev Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\\n    function grantWithCondition(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        IPermissionCondition _condition\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        _grantWithCondition(_where, _who, _permissionId, _condition);\\n    }\\n\\n    /// @notice Revokes permission from an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier.\\n    /// @dev Requires the `ROOT_PERMISSION_ID` permission.\\n    /// @param _where The address of the target contract for which `_who` loses permission.\\n    /// @param _who The address (EOA or contract) losing the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @dev Note, that revoking permissions with `_who` or `_where` equal to `ANY_ADDR` does not revoke other permissions with specific `_who` and `_where` addresses that exist in parallel.\\n    function revoke(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        _revoke(_where, _who, _permissionId);\\n    }\\n\\n    /// @notice Applies an array of permission operations on a single target contracts `_where`.\\n    /// @param _where The address of the single target contract.\\n    /// @param items The array of single-targeted permission operations to apply.\\n    function applySingleTargetPermissions(\\n        address _where,\\n        PermissionLib.SingleTargetPermission[] calldata items\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        for (uint256 i; i < items.length; ) {\\n            PermissionLib.SingleTargetPermission memory item = items[i];\\n\\n            if (item.operation == PermissionLib.Operation.Grant) {\\n                _grant(_where, item.who, item.permissionId);\\n            } else if (item.operation == PermissionLib.Operation.Revoke) {\\n                _revoke(_where, item.who, item.permissionId);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Applies an array of permission operations on multiple target contracts `items[i].where`.\\n    /// @param _items The array of multi-targeted permission operations to apply.\\n    function applyMultiTargetPermissions(\\n        PermissionLib.MultiTargetPermission[] calldata _items\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        for (uint256 i; i < _items.length; ) {\\n            PermissionLib.MultiTargetPermission memory item = _items[i];\\n\\n            if (item.operation == PermissionLib.Operation.Grant) {\\n                _grant(item.where, item.who, item.permissionId);\\n            } else if (item.operation == PermissionLib.Operation.Revoke) {\\n                _revoke(item.where, item.who, item.permissionId);\\n            } else if (item.operation == PermissionLib.Operation.GrantWithCondition) {\\n                _grantWithCondition(\\n                    item.where,\\n                    item.who,\\n                    item.permissionId,\\n                    IPermissionCondition(item.condition)\\n                );\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the target contract for which `_who` receives permission.\\n    /// @param _who The address (EOA or contract) for which the permission is checked.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if `_who` has the permissions on the target contract via the specified permission identifier.\\n    function isGranted(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) public view virtual returns (bool) {\\n        return\\n            _isGranted(_where, _who, _permissionId, _data) || // check if `_who` has permission for `_permissionId` on `_where`\\n            _isGranted(_where, ANY_ADDR, _permissionId, _data) || // check if anyone has permission for `_permissionId` on `_where`\\n            _isGranted(ANY_ADDR, _who, _permissionId, _data); // check if `_who` has permission for `_permissionI` on any contract\\n    }\\n\\n    /// @notice Grants the `ROOT_PERMISSION_ID` permission to the initial owner during initialization of the permission manager.\\n    /// @param _initialOwner The initial owner of the permission manager.\\n    function _initializePermissionManager(address _initialOwner) internal {\\n        _grant(address(this), _initialOwner, ROOT_PERMISSION_ID);\\n    }\\n\\n    /// @notice This method is used in the public `grant` method of the permission manager.\\n    /// @param _where The address of the target contract for which `_who` receives permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    function _grant(address _where, address _who, bytes32 _permissionId) internal virtual {\\n        _grantWithCondition(_where, _who, _permissionId, IPermissionCondition(ALLOW_FLAG));\\n    }\\n\\n    /// @notice This method is used in the internal `_grant` method of the permission manager.\\n    /// @param _where The address of the target contract for which `_who` receives permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _condition An address either resolving to a `PermissionCondition` contract address or being the `ALLOW_FLAG` address (`address(2)`).\\n    /// @dev Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\\n    function _grantWithCondition(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        IPermissionCondition _condition\\n    ) internal virtual {\\n        if (_where == ANY_ADDR && _who == ANY_ADDR) {\\n            revert AnyAddressDisallowedForWhoAndWhere();\\n        }\\n\\n        if (_where == ANY_ADDR || _who == ANY_ADDR) {\\n            bool isRestricted = isPermissionRestrictedForAnyAddr(_permissionId);\\n            if (_permissionId == ROOT_PERMISSION_ID || isRestricted) {\\n                revert PermissionsForAnyAddressDisallowed();\\n            }\\n\\n            if (address(_condition) == ALLOW_FLAG) {\\n                revert ConditionNotPresentForAnyAddress();\\n            }\\n        }\\n\\n        bytes32 permHash = permissionHash(_where, _who, _permissionId);\\n\\n        address currentCondition = permissionsHashed[permHash];\\n        address newCondition = address(_condition);\\n\\n        // Means permHash is not currently set.\\n        if (currentCondition == UNSET_FLAG) {\\n            permissionsHashed[permHash] = newCondition;\\n\\n            emit Granted(_permissionId, msg.sender, _where, _who, _condition);\\n        } else if (currentCondition != newCondition) {\\n            // Revert if `permHash` is already granted, but uses a different condition.\\n            // If we don't revert, we either should:\\n            //   - allow overriding the condition on the same permission\\n            //     which could be confusing whoever granted the same permission first\\n            //   - or do nothing and succeed silently which could be confusing for the caller.\\n            revert PermissionAlreadyGrantedForDifferentCondition({\\n                where: _where,\\n                who: _who,\\n                permissionId: _permissionId,\\n                currentCondition: currentCondition,\\n                newCondition: newCondition\\n            });\\n        }\\n    }\\n\\n    /// @notice This method is used in the public `revoke` method of the permission manager.\\n    /// @param _where The address of the target contract for which `_who` receives permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @dev Note, that revoking permissions with `_who` or `_where` equal to `ANY_ADDR` does not revoke other permissions with specific `_who` and `_where` addresses that might have been granted in parallel.\\n    function _revoke(address _where, address _who, bytes32 _permissionId) internal virtual {\\n        bytes32 permHash = permissionHash(_where, _who, _permissionId);\\n        if (permissionsHashed[permHash] != UNSET_FLAG) {\\n            permissionsHashed[permHash] = UNSET_FLAG;\\n\\n            emit Revoked(_permissionId, msg.sender, _where, _who);\\n        }\\n    }\\n\\n    /// @notice Checks if a caller is granted permissions on a target contract via a permission identifier and redirects the approval to a `PermissionCondition` if this was specified in the setup.\\n    /// @param _where The address of the target contract for which `_who` receives permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if `_who` has the permissions on the contract via the specified permissionId identifier.\\n    function _isGranted(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) internal view virtual returns (bool) {\\n        address accessFlagOrCondition = permissionsHashed[\\n            permissionHash(_where, _who, _permissionId)\\n        ];\\n\\n        if (accessFlagOrCondition == UNSET_FLAG) return false;\\n        if (accessFlagOrCondition == ALLOW_FLAG) return true;\\n\\n        // Since it's not a flag, assume it's a PermissionCondition and try-catch to skip failures\\n        try\\n            IPermissionCondition(accessFlagOrCondition).isGranted(\\n                _where,\\n                _who,\\n                _permissionId,\\n                _data\\n            )\\n        returns (bool allowed) {\\n            if (allowed) return true;\\n        } catch {}\\n\\n        return false;\\n    }\\n\\n    /// @notice A private function to be used to check permissions on the permission manager contract (`address(this)`) itself.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    function _auth(bytes32 _permissionId) internal view virtual {\\n        if (!isGranted(address(this), msg.sender, _permissionId, msg.data)) {\\n            revert Unauthorized({\\n                where: address(this),\\n                who: msg.sender,\\n                permissionId: _permissionId\\n            });\\n        }\\n    }\\n\\n    /// @notice Generates the hash for the `permissionsHashed` mapping obtained from the word \\\"PERMISSION\\\", the contract address, the address owning the permission, and the permission identifier.\\n    /// @param _where The address of the target contract for which `_who` receives permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @return The permission hash.\\n    function permissionHash(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId\\n    ) internal pure virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"PERMISSION\\\", _who, _where, _permissionId));\\n    }\\n\\n    /// @notice Decides if the granting permissionId is restricted when `_who == ANY_ADDR` or `_where == ANY_ADDR`.\\n    /// @param _permissionId The permission identifier.\\n    /// @return Whether or not the permission is restricted.\\n    /// @dev By default, every permission is unrestricted and it is the derived contract's responsibility to override it. Note, that the `ROOT_PERMISSION_ID` is included and not required to be set it again.\\n    function isPermissionRestrictedForAnyAddr(\\n        bytes32 _permissionId\\n    ) internal view virtual returns (bool) {\\n        (_permissionId); // silence the warning.\\n        return false;\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZeppelin's guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc0cb4f77558e3e56f70dda0e1ed83b6656659f69ad2145db8abf68bcfba51b7c\",\"license\":\"AGPL-3.0-or-later\"},\"src/framework/plugin/repo/IPluginRepo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.17;\\n\\n/// @title IPluginRepo\\n/// @author Aragon Association - 2022-2023\\n/// @notice The interface required for a plugin repository.\\ninterface IPluginRepo {\\n    /// @notice Updates the metadata for release with content `@fromHex(_releaseMetadata)`.\\n    /// @param _release The release number.\\n    /// @param _releaseMetadata The release metadata URI.\\n    function updateReleaseMetadata(uint8 _release, bytes calldata _releaseMetadata) external;\\n\\n    /// @notice Creates a new plugin version as the latest build for an existing release number or the first build for a new release number for the provided `PluginSetup` contract address and metadata.\\n    /// @param _release The release number.\\n    /// @param _pluginSetupAddress The address of the plugin setup contract.\\n    /// @param _buildMetadata The build metadata URI.\\n    /// @param _releaseMetadata The release metadata URI.\\n    function createVersion(\\n        uint8 _release,\\n        address _pluginSetupAddress,\\n        bytes calldata _buildMetadata,\\n        bytes calldata _releaseMetadata\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5d3d86e1e3f889c06e80a2654790a028abe11225a7a0c7d6f739d0096bc0b98d\",\"license\":\"AGPL-3.0-or-later\"},\"src/framework/plugin/repo/PluginRepo.sol\":{\"content\":\"// SPDX-License-Identifier:    AGPL-3.0-or-later\\n\\npragma solidity 0.8.17;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { ERC165Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { AddressUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport { ERC165CheckerUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\\\";\\n\\nimport { PermissionManager } from \\\"../../../core/permission/PermissionManager.sol\\\";\\nimport { PluginSetup } from \\\"../setup/PluginSetup.sol\\\";\\nimport { IPluginSetup } from \\\"../setup/PluginSetup.sol\\\";\\nimport { IPluginRepo } from \\\"./IPluginRepo.sol\\\";\\n\\n/// @title PluginRepo\\n/// @author Aragon Association - 2020 - 2023\\n/// @notice The plugin repository contract required for managing and publishing different plugin versions within the Aragon DAO framework.\\ncontract PluginRepo is Initializable, ERC165Upgradeable, IPluginRepo, UUPSUpgradeable, PermissionManager {\\n    using AddressUpgradeable for address;\\n    using ERC165CheckerUpgradeable for address;\\n\\n    /// @notice The struct describing the tag of a version obtained by a release and build number as `RELEASE.BUILD`.\\n    /// @param release The release number.\\n    /// @param build The build number\\n    /// @dev Releases can include a storage layout or the addition of new functions. Builds include logic changes or updates of the UI.\\n    struct Tag {\\n        uint8 release;\\n        uint16 build;\\n    }\\n\\n    /// @notice The struct describing a plugin version (release and build).\\n    /// @param tag The version tag.\\n    /// @param pluginSetup The setup contract associated with this version.\\n    /// @param buildMetadata The build metadata URI.\\n    struct Version {\\n        Tag tag;\\n        address pluginSetup;\\n        bytes buildMetadata;\\n    }\\n\\n    /// @notice The ID of the permission required to call the `createVersion` function.\\n    bytes32 public constant MAINTAINER_PERMISSION_ID = keccak256(\\\"MAINTAINER_PERMISSION\\\");\\n\\n    /// @notice The ID of the permission required to call the `createVersion` function.\\n    bytes32 public constant UPGRADE_REPO_PERMISSION_ID = keccak256(\\\"UPGRADE_REPO_PERMISSION\\\");\\n\\n    /// @notice The mapping between release and build numbers.\\n    mapping(uint8 => uint16) internal buildsPerRelease;\\n\\n    /// @notice The mapping between the version hash and the corresponding version information.\\n    mapping(bytes32 => Version) internal versions;\\n\\n    /// @notice The mapping between the plugin setup address and its corresponding version hash.\\n    mapping(address => bytes32) internal latestTagHashForPluginSetup;\\n\\n    /// @notice The ID of the latest release.\\n    /// @dev The maximum release number is 255.\\n    uint8 public latestRelease;\\n\\n    /// @notice Thrown if a version does not exist.\\n    /// @param versionHash The tag hash.\\n    error VersionHashDoesNotExist(bytes32 versionHash);\\n\\n    /// @notice Thrown if a plugin setup contract does not inherit from `PluginSetup`.\\n    error InvalidPluginSetupInterface();\\n\\n    /// @notice Thrown if a release number is zero.\\n    error ReleaseZeroNotAllowed();\\n\\n    /// @notice Thrown if a release number is incremented by more than one.\\n    /// @param latestRelease The latest release number.\\n    /// @param newRelease The new release number.\\n    error InvalidReleaseIncrement(uint8 latestRelease, uint8 newRelease);\\n\\n    /// @notice Thrown if the same plugin setup contract exists already in a previous releases.\\n    /// @param release The release number of the already existing plugin setup.\\n    /// @param build The build number of the already existing plugin setup.\\n    /// @param pluginSetup The plugin setup contract address.\\n    error PluginSetupAlreadyInPreviousRelease(uint8 release, uint16 build, address pluginSetup);\\n\\n    /// @notice Thrown if the metadata URI is empty.\\n    error EmptyReleaseMetadata();\\n\\n    /// @notice Thrown if release does not exist.\\n    error ReleaseDoesNotExist();\\n\\n    /// @notice Thrown if the same plugin setup exists in previous releases.\\n    /// @param release The release number.\\n    /// @param build The build number.\\n    /// @param pluginSetup The address of the plugin setup contract.\\n    /// @param buildMetadata The build metadata URI.\\n    event VersionCreated(uint8 release, uint16 build, address indexed pluginSetup, bytes buildMetadata);\\n\\n    /// @notice Thrown when a release's metadata was updated.\\n    /// @param release The release number.\\n    /// @param releaseMetadata The release metadata URI.\\n    event ReleaseMetadataUpdated(uint8 release, bytes releaseMetadata);\\n\\n    /// @dev Used to disallow initializing the implementation contract by an attacker for extra safety.\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract by\\n    /// - initializing the permission manager\\n    /// - granting the `MAINTAINER_PERMISSION_ID` permission to the initial owner.\\n    /// @dev This method is required to support [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822).\\n    function initialize(address initialOwner) external initializer {\\n        __PermissionManager_init(initialOwner);\\n\\n        _grant(address(this), initialOwner, MAINTAINER_PERMISSION_ID);\\n        _grant(address(this), initialOwner, UPGRADE_REPO_PERMISSION_ID);\\n    }\\n\\n    /// @inheritdoc IPluginRepo\\n    function createVersion(\\n        uint8 _release,\\n        address _pluginSetup,\\n        bytes calldata _buildMetadata,\\n        bytes calldata _releaseMetadata\\n    ) external auth(MAINTAINER_PERMISSION_ID) {\\n        if (!_pluginSetup.supportsInterface(type(IPluginSetup).interfaceId)) {\\n            revert InvalidPluginSetupInterface();\\n        }\\n\\n        if (_release == 0) {\\n            revert ReleaseZeroNotAllowed();\\n        }\\n\\n        // Check that the release number is not incremented by more than one\\n        if (_release - latestRelease > 1) {\\n            revert InvalidReleaseIncrement({ latestRelease: latestRelease, newRelease: _release });\\n        }\\n\\n        if (_release > latestRelease) {\\n            latestRelease = _release;\\n\\n            if (_releaseMetadata.length == 0) {\\n                revert EmptyReleaseMetadata();\\n            }\\n        }\\n\\n        // Make sure the same plugin setup wasn't used in previous releases.\\n        Version storage version = versions[latestTagHashForPluginSetup[_pluginSetup]];\\n        if (version.tag.release != 0 && version.tag.release != _release) {\\n            revert PluginSetupAlreadyInPreviousRelease(version.tag.release, version.tag.build, _pluginSetup);\\n        }\\n\\n        uint16 build = ++buildsPerRelease[_release];\\n\\n        Tag memory tag = Tag(_release, build);\\n        bytes32 _tagHash = tagHash(tag);\\n\\n        versions[_tagHash] = Version(tag, _pluginSetup, _buildMetadata);\\n\\n        latestTagHashForPluginSetup[_pluginSetup] = _tagHash;\\n\\n        emit VersionCreated({\\n            release: _release,\\n            build: build,\\n            pluginSetup: _pluginSetup,\\n            buildMetadata: _buildMetadata\\n        });\\n\\n        if (_releaseMetadata.length > 0) {\\n            emit ReleaseMetadataUpdated(_release, _releaseMetadata);\\n        }\\n    }\\n\\n    /// @inheritdoc IPluginRepo\\n    function updateReleaseMetadata(\\n        uint8 _release,\\n        bytes calldata _releaseMetadata\\n    ) external auth(MAINTAINER_PERMISSION_ID) {\\n        if (_release == 0) {\\n            revert ReleaseZeroNotAllowed();\\n        }\\n\\n        if (_release > latestRelease) {\\n            revert ReleaseDoesNotExist();\\n        }\\n\\n        if (_releaseMetadata.length == 0) {\\n            revert EmptyReleaseMetadata();\\n        }\\n\\n        emit ReleaseMetadataUpdated(_release, _releaseMetadata);\\n    }\\n\\n    /// @notice Returns the latest version for a given release number.\\n    /// @param _release The release number.\\n    /// @return The latest version of this release.\\n    function getLatestVersion(uint8 _release) public view returns (Version memory) {\\n        uint16 latestBuild = uint16(buildsPerRelease[_release]);\\n        return getVersion(tagHash(Tag(_release, latestBuild)));\\n    }\\n\\n    /// @notice Returns the latest version for a given plugin setup.\\n    /// @param _pluginSetup The plugin setup address\\n    /// @return The latest version associated with the plugin Setup.\\n    function getLatestVersion(address _pluginSetup) public view returns (Version memory) {\\n        return getVersion(latestTagHashForPluginSetup[_pluginSetup]);\\n    }\\n\\n    /// @notice Returns the version associated with a tag.\\n    /// @param _tag The version tag.\\n    /// @return The version associated with the tag.\\n    function getVersion(Tag calldata _tag) public view returns (Version memory) {\\n        return getVersion(tagHash(_tag));\\n    }\\n\\n    /// @notice Returns the version for a tag hash.\\n    /// @param _tagHash The tag hash.\\n    /// @return The version associated with a tag hash.\\n    function getVersion(bytes32 _tagHash) public view returns (Version memory) {\\n        Version storage version = versions[_tagHash];\\n\\n        if (version.tag.release == 0) {\\n            revert VersionHashDoesNotExist(_tagHash);\\n        }\\n\\n        return version;\\n    }\\n\\n    /// @notice Gets the total number of builds for a given release number.\\n    /// @param _release The release number.\\n    /// @return The number of builds of this release.\\n    function buildCount(uint8 _release) public view returns (uint256) {\\n        return buildsPerRelease[_release];\\n    }\\n\\n    /// @notice The hash of the version tag obtained from the packed, bytes-encoded release and build number.\\n    /// @param _tag The version tag.\\n    /// @return The version tag hash.\\n    function tagHash(Tag memory _tag) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_tag.release, _tag.build));\\n    }\\n\\n    /// @notice Internal method authorizing the upgrade of the contract via the [upgradeability mechanism for UUPS proxies](https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable) (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    /// @dev The caller must have the `UPGRADE_REPO_PERMISSION_ID` permission.\\n    function _authorizeUpgrade(address) internal virtual override auth(UPGRADE_REPO_PERMISSION_ID) {}\\n\\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @return Returns `true` if the interface is supported.\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return\\n            _interfaceId == type(IPluginRepo).interfaceId ||\\n            _interfaceId == type(UUPSUpgradeable).interfaceId ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xd0b0ee19113867ba1abdfb28b97cf2985948fede9400530735d41dd3cb7b0efd\",\"license\":\"AGPL-3.0-or-later\"},\"src/framework/plugin/setup/IPluginSetup.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {PermissionLib} from \\\"../../../core/permission/PermissionLib.sol\\\";\\nimport {IDAO} from \\\"../../../core/dao/IDAO.sol\\\";\\n\\n/// @title IPluginSetup\\n/// @author Aragon Association - 2022-2023\\n/// @notice The interface required for a plugin setup contract to be consumed by the `PluginSetupProcessor` for plugin installations, updates, and uninstallations.\\ninterface IPluginSetup {\\n    /// @notice The data associated with a prepared setup.\\n    /// @param helpers The address array of helpers (contracts or EOAs) associated with this plugin version after the installation or update.\\n    /// @param permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the installing or updating DAO.\\n    struct PreparedSetupData {\\n        address[] helpers;\\n        PermissionLib.MultiTargetPermission[] permissions;\\n    }\\n\\n    /// @notice The payload for plugin updates and uninstallations containing the existing contracts as well as optional data to be consumed by the plugin setup.\\n    /// @param plugin The address of the `Plugin`.\\n    /// @param currentHelpers The address array of all current helpers (contracts or EOAs) associated with the plugin to update from.\\n    /// @param data The bytes-encoded data containing the input parameters for the preparation of update/uninstall as specified in the corresponding ABI on the version's metadata.\\n    struct SetupPayload {\\n        address plugin;\\n        address[] currentHelpers;\\n        bytes data;\\n    }\\n\\n    /// @notice Prepares the installation of a plugin.\\n    /// @param _dao The address of the installing DAO.\\n    /// @param _data The bytes-encoded data containing the input parameters for the installation as specified in the plugin's build metadata JSON file.\\n    /// @return plugin The address of the `Plugin` contract being prepared for installation.\\n    /// @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\\n    function prepareInstallation(\\n        address _dao,\\n        bytes calldata _data\\n    ) external returns (address plugin, PreparedSetupData memory preparedSetupData);\\n\\n    /// @notice Prepares the update of a plugin.\\n    /// @param _dao The address of the updating DAO.\\n    /// @param _currentBuild The build number of the plugin to update from.\\n    /// @param _payload The relevant data necessary for the `prepareUpdate`. See above.\\n    /// @return initData The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.\\n    /// @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\\n    function prepareUpdate(\\n        address _dao,\\n        uint16 _currentBuild,\\n        SetupPayload calldata _payload\\n    ) external returns (bytes memory initData, PreparedSetupData memory preparedSetupData);\\n\\n    /// @notice Prepares the uninstallation of a plugin.\\n    /// @param _dao The address of the uninstalling DAO.\\n    /// @param _payload The relevant data necessary for the `prepareUninstallation`. See above.\\n    /// @return permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO.\\n    function prepareUninstallation(\\n        address _dao,\\n        SetupPayload calldata _payload\\n    ) external returns (PermissionLib.MultiTargetPermission[] memory permissions);\\n\\n    /// @notice Returns the plugin implementation address.\\n    /// @return The address of the plugin implementation contract.\\n    /// @dev The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x81d1e60154e672372318f6fccf337b6094bb8fe1192e2f755b8cc0d645ff5332\",\"license\":\"AGPL-3.0-or-later\"},\"src/framework/plugin/setup/PluginSetup.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport { ERC165 } from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport { ERC165Checker } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport { Clones } from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport { PermissionLib } from \\\"../../../core/permission/PermissionLib.sol\\\";\\nimport { createERC1967Proxy as createERC1967 } from \\\"../../../utils/Proxy.sol\\\";\\nimport { IPluginSetup } from \\\"./IPluginSetup.sol\\\";\\n\\n/// @title PluginSetup\\n/// @author Aragon Association - 2022-2023\\n/// @notice An abstract contract that developers have to inherit from to write the setup of a plugin.\\nabstract contract PluginSetup is ERC165, IPluginSetup {\\n    /// @inheritdoc IPluginSetup\\n    function prepareUpdate(\\n        address _dao,\\n        uint16 _currentBuild,\\n        SetupPayload calldata _payload\\n    ) external virtual override returns (bytes memory initData, PreparedSetupData memory preparedSetupData) {}\\n\\n    /// @notice A convenience function to create an [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy contract pointing to an implementation and being associated to a DAO.\\n    /// @param _implementation The address of the implementation contract to which the proxy is pointing to.\\n    /// @param _data The data to initialize the storage of the proxy contract.\\n    /// @return The address of the created proxy contract.\\n    function createERC1967Proxy(address _implementation, bytes memory _data) internal returns (address) {\\n        return createERC1967(_implementation, _data);\\n    }\\n\\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @return Returns `true` if the interface is supported.\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return _interfaceId == type(IPluginSetup).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x693e056da92c11b04c5fcfe33ad39a438108ea8cc9aab45f95274fdb2a121e92\",\"license\":\"AGPL-3.0-or-later\"},\"src/utils/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\n/// @notice Free function to create a [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy contract based on the passed base contract address.\\n/// @param _logic The base contract address.\\n/// @param _data The constructor arguments for this contract.\\n/// @return The address of the proxy contract created.\\n/// @dev Initializes the upgradeable proxy with an initial implementation specified by _logic. If _data is non-empty, it\\u2019s used as data in a delegate call to _logic. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor (see [OpenZeppelin ERC1967Proxy-constructor](https://docs.openzeppelin.com/contracts/4.x/api/proxy#ERC1967Proxy-constructor-address-bytes-)).\\nfunction createERC1967Proxy(address _logic, bytes memory _data) returns (address) {\\n    return address(new ERC1967Proxy(_logic, _data));\\n}\\n\",\"keccak256\":\"0x9d871292dfac2f42957e4d10eec56fd74dda0bd7803c01e849d2e9f5e2799fff\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516125a5620001206000396000818161067a015281816106c301528181610762015281816107a2015261085f01526125a56000f3fe6080604052600436106101355760003560e01c80639af3e909116100ab578063d68bad2c1161006f578063d68bad2c14610378578063d96054c414610398578063df1d6c44146103b8578063e0589bd3146103ec578063e978afe51461040c578063fc0544271461042c57600080fd5b80639af3e909146102c2578063afe5eb78146102e2578063c4d66de814610304578063c9dbc2a414610324578063cc98b8f51461034457600080fd5b80633659cfe6116100fd5780633659cfe6146102015780634f1ef2861461022157806350abe9101461023457806352d1902d146102615780637be0ca5e146102765780639aaf9f08146102a257600080fd5b806301ffc9a71461013a57806309e56b141461016f57806322844d041461019f5780632675fdd0146101c157806328375f67146101e1575b600080fd5b34801561014657600080fd5b5061015a610155366004611a9b565b61044c565b60405190151581526020015b60405180910390f35b34801561017b57600080fd5b5061019160008051602061255083398151915281565b604051908152602001610166565b3480156101ab57600080fd5b506101bf6101ba366004611ada565b61049e565b005b3480156101cd57600080fd5b5061015a6101dc366004611c05565b61055c565b3480156101ed57600080fd5b506101bf6101fc366004611cd0565b6105a7565b34801561020d57600080fd5b506101bf61021c366004611d23565b610670565b6101bf61022f366004611d40565b610758565b34801561024057600080fd5b5061025461024f366004611d23565b610828565b6040516101669190611de0565b34801561026d57600080fd5b50610191610852565b34801561028257600080fd5b5060cc546102909060ff1681565b60405160ff9091168152602001610166565b3480156102ae57600080fd5b506102546102bd366004611e2b565b610905565b3480156102ce57600080fd5b506102546102dd366004611e44565b610a23565b3480156102ee57600080fd5b5061019160008051602061250983398151915281565b34801561031057600080fd5b506101bf61031f366004611d23565b610a45565b34801561033057600080fd5b506101bf61033f366004611e5c565b610b9b565b34801561035057600080fd5b506101917f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b81565b34801561038457600080fd5b506101bf610393366004611eaf565b610bbf565b3480156103a457600080fd5b506101bf6103b3366004611eaf565b610be8565b3480156103c457600080fd5b506101916103d3366004611ef0565b60ff16600090815260c9602052604090205461ffff1690565b3480156103f857600080fd5b50610254610407366004611ef0565b610c0b565b34801561041857600080fd5b506101bf610427366004611f0b565b610c55565b34801561043857600080fd5b506101bf610447366004611f80565b610d4a565b60006001600160e01b03198216630350c86d60e61b148061047d57506001600160e01b03198216632b96ad4d60e01b145b8061049857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000805160206125508339815191526104b6816110a8565b60005b828110156105555760008484838181106104d5576104d5612013565b9050606002018036038101906104eb9190612038565b9050600081516002811115610502576105026120a1565b0361051f5761051a8682602001518360400151611117565b61054c565b600181516002811115610534576105346120a1565b0361054c5761054c8682602001518360400151611129565b506001016104b9565b5050505050565b600061056a858585856111bd565b806105835750610583856001600160a01b0385856111bd565b8061059c575061059c6001600160a01b038585856111bd565b90505b949350505050565b6000805160206125098339815191526105bf816110a8565b8360ff166000036105e357604051633b7a97fd60e11b815260040160405180910390fd5b60cc5460ff908116908516111561060d576040516311c6e3ab60e01b815260040160405180910390fd5b600082900361062f576040516388bc3fe760e01b815260040160405180910390fd5b7f8ff94c32efcef376eb02508cba5536e0634c1d6ad4b51ffa0f7306c78edaf5f7848484604051610662939291906120e0565b60405180910390a150505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106c15760405162461bcd60e51b81526004016106b8906120fd565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661070a6000805160206124e9833981519152546001600160a01b031690565b6001600160a01b0316146107305760405162461bcd60e51b81526004016106b890612149565b610739816112a5565b60408051600080825260208201909252610755918391906112cf565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107a05760405162461bcd60e51b81526004016106b8906120fd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107e96000805160206124e9833981519152546001600160a01b031690565b6001600160a01b03161461080f5760405162461bcd60e51b81526004016106b890612149565b610818826112a5565b610824828260016112cf565b5050565b610830611a69565b6001600160a01b038216600090815260cb602052604090205461049890610905565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108f25760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016106b8565b506000805160206124e983398151915290565b61090d611a69565b600082815260ca602052604081208054909160ff909116900361094657604051638d0aeeb160e01b8152600481018490526024016106b8565b6040805160a081018252825460ff81166060830190815261010090910461ffff166080830152815260018301546001600160a01b0316602082015260028301805491928492908401919061099990612195565b80601f01602080910402602001604051908101604052809291908181526020018280546109c590612195565b8015610a125780601f106109e757610100808354040283529160200191610a12565b820191906000526020600020905b8154815290600101906020018083116109f557829003601f168201915b505050505081525050915050919050565b610a2b611a69565b6104986102bd610a40368590038501856121c9565b61143a565b600054610100900460ff1615808015610a655750600054600160ff909116105b80610a7f5750303b158015610a7f575060005460ff166001145b610ae25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b8565b6000805460ff191660011790558015610b05576000805461ff0019166101001790555b610b0e82611499565b610b273083600080516020612509833981519152611117565b610b5230837f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b611117565b8015610824576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600080516020612550833981519152610bb3816110a8565b6105558585858561150d565b600080516020612550833981519152610bd7816110a8565b610be2848484611117565b50505050565b600080516020612550833981519152610c00816110a8565b610be2848484611129565b610c13611a69565b60ff8216600081815260c9602090815260409182902054825180840190935292825261ffff909216918101829052610c4e906102bd9061143a565b9392505050565b600080516020612550833981519152610c6d816110a8565b60005b82811015610be2576000848483818110610c8c57610c8c612013565b905060a00201803603810190610ca2919061222d565b9050600081516002811115610cb957610cb96120a1565b03610cda57610cd5816020015182604001518360800151611117565b610d41565b600181516002811115610cef57610cef6120a1565b03610d0b57610cd5816020015182604001518360800151611129565b600281516002811115610d2057610d206120a1565b03610d4157610d41816020015182604001518360800151846060015161150d565b50600101610c70565b600080516020612509833981519152610d62816110a8565b610d7c6001600160a01b03871663099718b560e41b6116e0565b610d9957604051639d145ceb60e01b815260040160405180910390fd5b8660ff16600003610dbd57604051633b7a97fd60e11b815260040160405180910390fd5b60cc54600190610dd09060ff16896122d2565b60ff161115610e035760cc546040516353db7b7b60e01b815260ff918216600482015290881660248201526044016106b8565b60cc5460ff9081169088161115610e455760cc805460ff191660ff89161790556000829003610e45576040516388bc3fe760e01b815260040160405180910390fd5b6001600160a01b038616600090815260cb6020908152604080832054835260ca9091529020805460ff1615801590610e845750805460ff898116911614155b15610eca57805460405160016218326360e21b0319815260ff8216600482015261010090910461ffff1660248201526001600160a01b03881660448201526064016106b8565b60ff8816600090815260c96020526040812080548290610eed9061ffff166122eb565b91906101000a81548161ffff021916908361ffff16021790559050600060405180604001604052808b60ff1681526020018361ffff1681525090506000610f338261143a565b905060405180606001604052808381526020018b6001600160a01b031681526020018a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505083815260ca60209081526040918290208451805182549184015161ffff166101000262ffffff1990921660ff90911617178155908401516001820180546001600160a01b039092166001600160a01b0319909216919091179055908301519091506002820190610ffd908261235a565b5050506001600160a01b038a16600081815260cb602052604090819020839055517feb4bce5025c5200f6a074dd28fe7754955dfdca0eb2dcbaa16ccc292655e666990611051908e9087908e908e9061241a565b60405180910390a2851561109b577f8ff94c32efcef376eb02508cba5536e0634c1d6ad4b51ffa0f7306c78edaf5f78b8888604051611092939291906120e0565b60405180910390a15b5050505050505050505050565b6110eb3033836000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061055c92505050565b61075557604051631e09743f60e01b8152306004820152336024820152604481018290526064016106b8565b611124838383600261150d565b505050565b60006111368484846116fc565b6000818152609760205260409020549091506001600160a01b031615610be25760008181526097602090815260409182902080546001600160a01b031916905590516001600160a01b038681168252851691339185917f3ca48185ec3f6e47e24db18b13f1c65b1ce05da1659f9c1c4fe717dda5f67524910160405180910390a450505050565b600080609760006111cf8888886116fc565b81526020810191909152604001600020546001600160a01b03169050806111fa57600091505061059f565b6001196001600160a01b0382160161121657600191505061059f565b6040516302675fdd60e41b81526001600160a01b03821690632675fdd09061124890899089908990899060040161244b565b602060405180830381865afa925050508015611281575060408051601f3d908101601f1916820190925261127e9181019061247e565b60015b156112995780156112975760019250505061059f565b505b50600095945050505050565b7f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b610824816110a8565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156113025761112483611761565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561135c575060408051601f3d908101601f19168201909252611359918101906124a0565b60015b6113bf5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016106b8565b6000805160206124e9833981519152811461142e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016106b8565b506111248383836117fd565b60008160000151826020015160405160200161147c92919060f89290921b6001600160f81b031916825260f01b6001600160f01b031916600182015260030190565b604051602081830303815290604052805190602001209050919050565b600054610100900460ff166115045760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106b8565b61075581611822565b6001600160a01b0384811614801561152d57506001600160a01b03838116145b1561154b576040516385f1ba9960e01b815260040160405180910390fd5b6001600160a01b03848116148061156a57506001600160a01b03838116145b156115d557600060008051602061255083398151915283148061158a5750805b156115a8576040516324159e5b60e01b815260040160405180910390fd5b6001196001600160a01b038316016115d3576040516324aadf4360e21b815260040160405180910390fd5b505b60006115e28585856116fc565b6000818152609760205260409020549091506001600160a01b0316828161167b5760008381526097602090815260409182902080546001600160a01b0319166001600160a01b038581169190911790915582518a8216815287821692810192909252881691339188917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a46116d7565b806001600160a01b0316826001600160a01b0316146116d7576040516305cc3c4f60e11b81526001600160a01b03808916600483015280881660248301526044820187905280841660648301528216608482015260a4016106b8565b50505050505050565b60006116eb8361183b565b8015610c4e5750610c4e838361186e565b604051692822a926a4a9a9a4a7a760b11b60208201526bffffffffffffffffffffffff19606084811b8216602a84015285901b16603e820152605281018290526000906072016040516020818303038152906040528051906020012090509392505050565b6001600160a01b0381163b6117ce5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106b8565b6000805160206124e983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611806836118f7565b6000825111806118135750805b1561112457610be28383611937565b6107553082600080516020612550833981519152611117565b600061184e826301ffc9a760e01b61186e565b80156104985750611867826001600160e01b031961186e565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180516001600160e01b03166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d915060005190508280156118e0575060208210155b80156118ec5750600081115b979650505050505050565b61190081611761565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61199f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106b8565b600080846001600160a01b0316846040516119ba91906124b9565b600060405180830381855af49150503d80600081146119f5576040519150601f19603f3d011682016040523d82523d6000602084013e6119fa565b606091505b5091509150611a22828260405180606001604052806027815260200161252960279139611a2b565b95945050505050565b60608315611a3a575081610c4e565b610c4e8383815115611a4f5781518083602001fd5b8060405162461bcd60e51b81526004016106b891906124d5565b6040805160a0810190915260006060820181815260808301919091528190815260006020820152606060409091015290565b600060208284031215611aad57600080fd5b81356001600160e01b031981168114610c4e57600080fd5b6001600160a01b038116811461075557600080fd5b600080600060408486031215611aef57600080fd5b8335611afa81611ac5565b9250602084013567ffffffffffffffff80821115611b1757600080fd5b818601915086601f830112611b2b57600080fd5b813581811115611b3a57600080fd5b876020606083028501011115611b4f57600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611b8957600080fd5b813567ffffffffffffffff80821115611ba457611ba4611b62565b604051601f8301601f19908116603f01168101908282118183101715611bcc57611bcc611b62565b81604052838152866020858801011115611be557600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215611c1b57600080fd5b8435611c2681611ac5565b93506020850135611c3681611ac5565b925060408501359150606085013567ffffffffffffffff811115611c5957600080fd5b611c6587828801611b78565b91505092959194509250565b803560ff81168114611c8257600080fd5b919050565b60008083601f840112611c9957600080fd5b50813567ffffffffffffffff811115611cb157600080fd5b602083019150836020828501011115611cc957600080fd5b9250929050565b600080600060408486031215611ce557600080fd5b611cee84611c71565b9250602084013567ffffffffffffffff811115611d0a57600080fd5b611d1686828701611c87565b9497909650939450505050565b600060208284031215611d3557600080fd5b8135610c4e81611ac5565b60008060408385031215611d5357600080fd5b8235611d5e81611ac5565b9150602083013567ffffffffffffffff811115611d7a57600080fd5b611d8685828601611b78565b9150509250929050565b60005b83811015611dab578181015183820152602001611d93565b50506000910152565b60008151808452611dcc816020860160208601611d90565b601f01601f19169290920160200192915050565b60208082528251805160ff168383015281015161ffff16604080840191909152908301516001600160a01b0316606083015282015160808083015260009061059f60a0840182611db4565b600060208284031215611e3d57600080fd5b5035919050565b600060408284031215611e5657600080fd5b50919050565b60008060008060808587031215611e7257600080fd5b8435611e7d81611ac5565b93506020850135611e8d81611ac5565b9250604085013591506060850135611ea481611ac5565b939692955090935050565b600080600060608486031215611ec457600080fd5b8335611ecf81611ac5565b92506020840135611edf81611ac5565b929592945050506040919091013590565b600060208284031215611f0257600080fd5b610c4e82611c71565b60008060208385031215611f1e57600080fd5b823567ffffffffffffffff80821115611f3657600080fd5b818501915085601f830112611f4a57600080fd5b813581811115611f5957600080fd5b86602060a083028501011115611f6e57600080fd5b60209290920196919550909350505050565b60008060008060008060808789031215611f9957600080fd5b611fa287611c71565b95506020870135611fb281611ac5565b9450604087013567ffffffffffffffff80821115611fcf57600080fd5b611fdb8a838b01611c87565b90965094506060890135915080821115611ff457600080fd5b5061200189828a01611c87565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b803560038110611c8257600080fd5b60006060828403121561204a57600080fd5b6040516060810181811067ffffffffffffffff8211171561206d5761206d611b62565b60405261207983612029565b8152602083013561208981611ac5565b60208201526040928301359281019290925250919050565b634e487b7160e01b600052602160045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60ff8416815260406020820152600061059c6040830184866120b7565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600181811c908216806121a957607f821691505b602082108103611e5657634e487b7160e01b600052602260045260246000fd5b6000604082840312156121db57600080fd5b6040516040810181811067ffffffffffffffff821117156121fe576121fe611b62565b60405261220a83611c71565b8152602083013561ffff8116811461222157600080fd5b60208201529392505050565b600060a0828403121561223f57600080fd5b60405160a0810181811067ffffffffffffffff8211171561226257612262611b62565b60405261226e83612029565b8152602083013561227e81611ac5565b6020820152604083013561229181611ac5565b604082015260608301356122a481611ac5565b60608201526080928301359281019290925250919050565b634e487b7160e01b600052601160045260246000fd5b60ff8281168282160390811115610498576104986122bc565b600061ffff808316818103612302576123026122bc565b6001019392505050565b601f82111561112457600081815260208120601f850160051c810160208610156123335750805b601f850160051c820191505b818110156123525782815560010161233f565b505050505050565b815167ffffffffffffffff81111561237457612374611b62565b612388816123828454612195565b8461230c565b602080601f8311600181146123bd57600084156123a55750858301515b600019600386901b1c1916600185901b178555612352565b600085815260208120601f198616915b828110156123ec578886015182559484019460019091019084016123cd565b508582101561240a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60ff8516815261ffff841660208201526060604082015260006124416060830184866120b7565b9695505050505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061244190830184611db4565b60006020828403121561249057600080fd5b81518015158114610c4e57600080fd5b6000602082840312156124b257600080fd5b5051919050565b600082516124cb818460208701611d90565b9190910192915050565b602081526000610c4e6020830184611db456fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33a2646970667358221220693925967f0d7808d259b7747145944c918815f7619bd93d4fab52d01e14681b64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c80639af3e909116100ab578063d68bad2c1161006f578063d68bad2c14610378578063d96054c414610398578063df1d6c44146103b8578063e0589bd3146103ec578063e978afe51461040c578063fc0544271461042c57600080fd5b80639af3e909146102c2578063afe5eb78146102e2578063c4d66de814610304578063c9dbc2a414610324578063cc98b8f51461034457600080fd5b80633659cfe6116100fd5780633659cfe6146102015780634f1ef2861461022157806350abe9101461023457806352d1902d146102615780637be0ca5e146102765780639aaf9f08146102a257600080fd5b806301ffc9a71461013a57806309e56b141461016f57806322844d041461019f5780632675fdd0146101c157806328375f67146101e1575b600080fd5b34801561014657600080fd5b5061015a610155366004611a9b565b61044c565b60405190151581526020015b60405180910390f35b34801561017b57600080fd5b5061019160008051602061255083398151915281565b604051908152602001610166565b3480156101ab57600080fd5b506101bf6101ba366004611ada565b61049e565b005b3480156101cd57600080fd5b5061015a6101dc366004611c05565b61055c565b3480156101ed57600080fd5b506101bf6101fc366004611cd0565b6105a7565b34801561020d57600080fd5b506101bf61021c366004611d23565b610670565b6101bf61022f366004611d40565b610758565b34801561024057600080fd5b5061025461024f366004611d23565b610828565b6040516101669190611de0565b34801561026d57600080fd5b50610191610852565b34801561028257600080fd5b5060cc546102909060ff1681565b60405160ff9091168152602001610166565b3480156102ae57600080fd5b506102546102bd366004611e2b565b610905565b3480156102ce57600080fd5b506102546102dd366004611e44565b610a23565b3480156102ee57600080fd5b5061019160008051602061250983398151915281565b34801561031057600080fd5b506101bf61031f366004611d23565b610a45565b34801561033057600080fd5b506101bf61033f366004611e5c565b610b9b565b34801561035057600080fd5b506101917f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b81565b34801561038457600080fd5b506101bf610393366004611eaf565b610bbf565b3480156103a457600080fd5b506101bf6103b3366004611eaf565b610be8565b3480156103c457600080fd5b506101916103d3366004611ef0565b60ff16600090815260c9602052604090205461ffff1690565b3480156103f857600080fd5b50610254610407366004611ef0565b610c0b565b34801561041857600080fd5b506101bf610427366004611f0b565b610c55565b34801561043857600080fd5b506101bf610447366004611f80565b610d4a565b60006001600160e01b03198216630350c86d60e61b148061047d57506001600160e01b03198216632b96ad4d60e01b145b8061049857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000805160206125508339815191526104b6816110a8565b60005b828110156105555760008484838181106104d5576104d5612013565b9050606002018036038101906104eb9190612038565b9050600081516002811115610502576105026120a1565b0361051f5761051a8682602001518360400151611117565b61054c565b600181516002811115610534576105346120a1565b0361054c5761054c8682602001518360400151611129565b506001016104b9565b5050505050565b600061056a858585856111bd565b806105835750610583856001600160a01b0385856111bd565b8061059c575061059c6001600160a01b038585856111bd565b90505b949350505050565b6000805160206125098339815191526105bf816110a8565b8360ff166000036105e357604051633b7a97fd60e11b815260040160405180910390fd5b60cc5460ff908116908516111561060d576040516311c6e3ab60e01b815260040160405180910390fd5b600082900361062f576040516388bc3fe760e01b815260040160405180910390fd5b7f8ff94c32efcef376eb02508cba5536e0634c1d6ad4b51ffa0f7306c78edaf5f7848484604051610662939291906120e0565b60405180910390a150505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106c15760405162461bcd60e51b81526004016106b8906120fd565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661070a6000805160206124e9833981519152546001600160a01b031690565b6001600160a01b0316146107305760405162461bcd60e51b81526004016106b890612149565b610739816112a5565b60408051600080825260208201909252610755918391906112cf565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107a05760405162461bcd60e51b81526004016106b8906120fd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107e96000805160206124e9833981519152546001600160a01b031690565b6001600160a01b03161461080f5760405162461bcd60e51b81526004016106b890612149565b610818826112a5565b610824828260016112cf565b5050565b610830611a69565b6001600160a01b038216600090815260cb602052604090205461049890610905565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108f25760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016106b8565b506000805160206124e983398151915290565b61090d611a69565b600082815260ca602052604081208054909160ff909116900361094657604051638d0aeeb160e01b8152600481018490526024016106b8565b6040805160a081018252825460ff81166060830190815261010090910461ffff166080830152815260018301546001600160a01b0316602082015260028301805491928492908401919061099990612195565b80601f01602080910402602001604051908101604052809291908181526020018280546109c590612195565b8015610a125780601f106109e757610100808354040283529160200191610a12565b820191906000526020600020905b8154815290600101906020018083116109f557829003601f168201915b505050505081525050915050919050565b610a2b611a69565b6104986102bd610a40368590038501856121c9565b61143a565b600054610100900460ff1615808015610a655750600054600160ff909116105b80610a7f5750303b158015610a7f575060005460ff166001145b610ae25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b8565b6000805460ff191660011790558015610b05576000805461ff0019166101001790555b610b0e82611499565b610b273083600080516020612509833981519152611117565b610b5230837f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b611117565b8015610824576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600080516020612550833981519152610bb3816110a8565b6105558585858561150d565b600080516020612550833981519152610bd7816110a8565b610be2848484611117565b50505050565b600080516020612550833981519152610c00816110a8565b610be2848484611129565b610c13611a69565b60ff8216600081815260c9602090815260409182902054825180840190935292825261ffff909216918101829052610c4e906102bd9061143a565b9392505050565b600080516020612550833981519152610c6d816110a8565b60005b82811015610be2576000848483818110610c8c57610c8c612013565b905060a00201803603810190610ca2919061222d565b9050600081516002811115610cb957610cb96120a1565b03610cda57610cd5816020015182604001518360800151611117565b610d41565b600181516002811115610cef57610cef6120a1565b03610d0b57610cd5816020015182604001518360800151611129565b600281516002811115610d2057610d206120a1565b03610d4157610d41816020015182604001518360800151846060015161150d565b50600101610c70565b600080516020612509833981519152610d62816110a8565b610d7c6001600160a01b03871663099718b560e41b6116e0565b610d9957604051639d145ceb60e01b815260040160405180910390fd5b8660ff16600003610dbd57604051633b7a97fd60e11b815260040160405180910390fd5b60cc54600190610dd09060ff16896122d2565b60ff161115610e035760cc546040516353db7b7b60e01b815260ff918216600482015290881660248201526044016106b8565b60cc5460ff9081169088161115610e455760cc805460ff191660ff89161790556000829003610e45576040516388bc3fe760e01b815260040160405180910390fd5b6001600160a01b038616600090815260cb6020908152604080832054835260ca9091529020805460ff1615801590610e845750805460ff898116911614155b15610eca57805460405160016218326360e21b0319815260ff8216600482015261010090910461ffff1660248201526001600160a01b03881660448201526064016106b8565b60ff8816600090815260c96020526040812080548290610eed9061ffff166122eb565b91906101000a81548161ffff021916908361ffff16021790559050600060405180604001604052808b60ff1681526020018361ffff1681525090506000610f338261143a565b905060405180606001604052808381526020018b6001600160a01b031681526020018a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505083815260ca60209081526040918290208451805182549184015161ffff166101000262ffffff1990921660ff90911617178155908401516001820180546001600160a01b039092166001600160a01b0319909216919091179055908301519091506002820190610ffd908261235a565b5050506001600160a01b038a16600081815260cb602052604090819020839055517feb4bce5025c5200f6a074dd28fe7754955dfdca0eb2dcbaa16ccc292655e666990611051908e9087908e908e9061241a565b60405180910390a2851561109b577f8ff94c32efcef376eb02508cba5536e0634c1d6ad4b51ffa0f7306c78edaf5f78b8888604051611092939291906120e0565b60405180910390a15b5050505050505050505050565b6110eb3033836000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061055c92505050565b61075557604051631e09743f60e01b8152306004820152336024820152604481018290526064016106b8565b611124838383600261150d565b505050565b60006111368484846116fc565b6000818152609760205260409020549091506001600160a01b031615610be25760008181526097602090815260409182902080546001600160a01b031916905590516001600160a01b038681168252851691339185917f3ca48185ec3f6e47e24db18b13f1c65b1ce05da1659f9c1c4fe717dda5f67524910160405180910390a450505050565b600080609760006111cf8888886116fc565b81526020810191909152604001600020546001600160a01b03169050806111fa57600091505061059f565b6001196001600160a01b0382160161121657600191505061059f565b6040516302675fdd60e41b81526001600160a01b03821690632675fdd09061124890899089908990899060040161244b565b602060405180830381865afa925050508015611281575060408051601f3d908101601f1916820190925261127e9181019061247e565b60015b156112995780156112975760019250505061059f565b505b50600095945050505050565b7f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b610824816110a8565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156113025761112483611761565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561135c575060408051601f3d908101601f19168201909252611359918101906124a0565b60015b6113bf5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016106b8565b6000805160206124e9833981519152811461142e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016106b8565b506111248383836117fd565b60008160000151826020015160405160200161147c92919060f89290921b6001600160f81b031916825260f01b6001600160f01b031916600182015260030190565b604051602081830303815290604052805190602001209050919050565b600054610100900460ff166115045760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106b8565b61075581611822565b6001600160a01b0384811614801561152d57506001600160a01b03838116145b1561154b576040516385f1ba9960e01b815260040160405180910390fd5b6001600160a01b03848116148061156a57506001600160a01b03838116145b156115d557600060008051602061255083398151915283148061158a5750805b156115a8576040516324159e5b60e01b815260040160405180910390fd5b6001196001600160a01b038316016115d3576040516324aadf4360e21b815260040160405180910390fd5b505b60006115e28585856116fc565b6000818152609760205260409020549091506001600160a01b0316828161167b5760008381526097602090815260409182902080546001600160a01b0319166001600160a01b038581169190911790915582518a8216815287821692810192909252881691339188917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a46116d7565b806001600160a01b0316826001600160a01b0316146116d7576040516305cc3c4f60e11b81526001600160a01b03808916600483015280881660248301526044820187905280841660648301528216608482015260a4016106b8565b50505050505050565b60006116eb8361183b565b8015610c4e5750610c4e838361186e565b604051692822a926a4a9a9a4a7a760b11b60208201526bffffffffffffffffffffffff19606084811b8216602a84015285901b16603e820152605281018290526000906072016040516020818303038152906040528051906020012090509392505050565b6001600160a01b0381163b6117ce5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106b8565b6000805160206124e983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611806836118f7565b6000825111806118135750805b1561112457610be28383611937565b6107553082600080516020612550833981519152611117565b600061184e826301ffc9a760e01b61186e565b80156104985750611867826001600160e01b031961186e565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180516001600160e01b03166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d915060005190508280156118e0575060208210155b80156118ec5750600081115b979650505050505050565b61190081611761565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61199f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106b8565b600080846001600160a01b0316846040516119ba91906124b9565b600060405180830381855af49150503d80600081146119f5576040519150601f19603f3d011682016040523d82523d6000602084013e6119fa565b606091505b5091509150611a22828260405180606001604052806027815260200161252960279139611a2b565b95945050505050565b60608315611a3a575081610c4e565b610c4e8383815115611a4f5781518083602001fd5b8060405162461bcd60e51b81526004016106b891906124d5565b6040805160a0810190915260006060820181815260808301919091528190815260006020820152606060409091015290565b600060208284031215611aad57600080fd5b81356001600160e01b031981168114610c4e57600080fd5b6001600160a01b038116811461075557600080fd5b600080600060408486031215611aef57600080fd5b8335611afa81611ac5565b9250602084013567ffffffffffffffff80821115611b1757600080fd5b818601915086601f830112611b2b57600080fd5b813581811115611b3a57600080fd5b876020606083028501011115611b4f57600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611b8957600080fd5b813567ffffffffffffffff80821115611ba457611ba4611b62565b604051601f8301601f19908116603f01168101908282118183101715611bcc57611bcc611b62565b81604052838152866020858801011115611be557600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215611c1b57600080fd5b8435611c2681611ac5565b93506020850135611c3681611ac5565b925060408501359150606085013567ffffffffffffffff811115611c5957600080fd5b611c6587828801611b78565b91505092959194509250565b803560ff81168114611c8257600080fd5b919050565b60008083601f840112611c9957600080fd5b50813567ffffffffffffffff811115611cb157600080fd5b602083019150836020828501011115611cc957600080fd5b9250929050565b600080600060408486031215611ce557600080fd5b611cee84611c71565b9250602084013567ffffffffffffffff811115611d0a57600080fd5b611d1686828701611c87565b9497909650939450505050565b600060208284031215611d3557600080fd5b8135610c4e81611ac5565b60008060408385031215611d5357600080fd5b8235611d5e81611ac5565b9150602083013567ffffffffffffffff811115611d7a57600080fd5b611d8685828601611b78565b9150509250929050565b60005b83811015611dab578181015183820152602001611d93565b50506000910152565b60008151808452611dcc816020860160208601611d90565b601f01601f19169290920160200192915050565b60208082528251805160ff168383015281015161ffff16604080840191909152908301516001600160a01b0316606083015282015160808083015260009061059f60a0840182611db4565b600060208284031215611e3d57600080fd5b5035919050565b600060408284031215611e5657600080fd5b50919050565b60008060008060808587031215611e7257600080fd5b8435611e7d81611ac5565b93506020850135611e8d81611ac5565b9250604085013591506060850135611ea481611ac5565b939692955090935050565b600080600060608486031215611ec457600080fd5b8335611ecf81611ac5565b92506020840135611edf81611ac5565b929592945050506040919091013590565b600060208284031215611f0257600080fd5b610c4e82611c71565b60008060208385031215611f1e57600080fd5b823567ffffffffffffffff80821115611f3657600080fd5b818501915085601f830112611f4a57600080fd5b813581811115611f5957600080fd5b86602060a083028501011115611f6e57600080fd5b60209290920196919550909350505050565b60008060008060008060808789031215611f9957600080fd5b611fa287611c71565b95506020870135611fb281611ac5565b9450604087013567ffffffffffffffff80821115611fcf57600080fd5b611fdb8a838b01611c87565b90965094506060890135915080821115611ff457600080fd5b5061200189828a01611c87565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b803560038110611c8257600080fd5b60006060828403121561204a57600080fd5b6040516060810181811067ffffffffffffffff8211171561206d5761206d611b62565b60405261207983612029565b8152602083013561208981611ac5565b60208201526040928301359281019290925250919050565b634e487b7160e01b600052602160045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60ff8416815260406020820152600061059c6040830184866120b7565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600181811c908216806121a957607f821691505b602082108103611e5657634e487b7160e01b600052602260045260246000fd5b6000604082840312156121db57600080fd5b6040516040810181811067ffffffffffffffff821117156121fe576121fe611b62565b60405261220a83611c71565b8152602083013561ffff8116811461222157600080fd5b60208201529392505050565b600060a0828403121561223f57600080fd5b60405160a0810181811067ffffffffffffffff8211171561226257612262611b62565b60405261226e83612029565b8152602083013561227e81611ac5565b6020820152604083013561229181611ac5565b604082015260608301356122a481611ac5565b60608201526080928301359281019290925250919050565b634e487b7160e01b600052601160045260246000fd5b60ff8281168282160390811115610498576104986122bc565b600061ffff808316818103612302576123026122bc565b6001019392505050565b601f82111561112457600081815260208120601f850160051c810160208610156123335750805b601f850160051c820191505b818110156123525782815560010161233f565b505050505050565b815167ffffffffffffffff81111561237457612374611b62565b612388816123828454612195565b8461230c565b602080601f8311600181146123bd57600084156123a55750858301515b600019600386901b1c1916600185901b178555612352565b600085815260208120601f198616915b828110156123ec578886015182559484019460019091019084016123cd565b508582101561240a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60ff8516815261ffff841660208201526060604082015260006124416060830184866120b7565b9695505050505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061244190830184611db4565b60006020828403121561249057600080fd5b81518015158114610c4e57600080fd5b6000602082840312156124b257600080fd5b5051919050565b600082516124cb818460208701611d90565b9190910192915050565b602081526000610c4e6020830184611db456fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33a2646970667358221220693925967f0d7808d259b7747145944c918815f7619bd93d4fab52d01e14681b64736f6c63430008110033",
  "devdoc": {
    "author": "Aragon Association - 2020 - 2023",
    "errors": {
      "InvalidReleaseIncrement(uint8,uint8)": [
        {
          "params": {
            "latestRelease": "The latest release number.",
            "newRelease": "The new release number."
          }
        }
      ],
      "PermissionAlreadyGrantedForDifferentCondition(address,address,bytes32,address,address)": [
        {
          "details": "This makes sure that condition on the same permission can not be overwriten by a different condition.",
          "params": {
            "currentCondition": "The current condition set for permissionId.",
            "newCondition": "The new condition it tries to set for permissionId.",
            "permissionId": "The permission identifier.",
            "where": "The address of the target contract to grant `_who` permission to.",
            "who": "The address (EOA or contract) to which the permission has already been granted."
          }
        }
      ],
      "PluginSetupAlreadyInPreviousRelease(uint8,uint16,address)": [
        {
          "params": {
            "build": "The build number of the already existing plugin setup.",
            "pluginSetup": "The plugin setup contract address.",
            "release": "The release number of the already existing plugin setup."
          }
        }
      ],
      "Unauthorized(address,address,bytes32)": [
        {
          "params": {
            "permissionId": "The permission identifier.",
            "where": "The context in which the authorization reverted.",
            "who": "The address (EOA or contract) missing the permission."
          }
        }
      ],
      "VersionHashDoesNotExist(bytes32)": [
        {
          "params": {
            "versionHash": "The tag hash."
          }
        }
      ]
    },
    "events": {
      "ReleaseMetadataUpdated(uint8,bytes)": {
        "params": {
          "release": "The release number.",
          "releaseMetadata": "The release metadata URI."
        }
      },
      "VersionCreated(uint8,uint16,address,bytes)": {
        "params": {
          "build": "The build number.",
          "buildMetadata": "The build metadata URI.",
          "pluginSetup": "The address of the plugin setup contract.",
          "release": "The release number."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "applyMultiTargetPermissions((uint8,address,address,address,bytes32)[])": {
        "params": {
          "_items": "The array of multi-targeted permission operations to apply."
        }
      },
      "applySingleTargetPermissions(address,(uint8,address,bytes32)[])": {
        "params": {
          "_where": "The address of the single target contract.",
          "items": "The array of single-targeted permission operations to apply."
        }
      },
      "buildCount(uint8)": {
        "params": {
          "_release": "The release number."
        },
        "returns": {
          "_0": "The number of builds of this release."
        }
      },
      "constructor": {
        "details": "Used to disallow initializing the implementation contract by an attacker for extra safety."
      },
      "createVersion(uint8,address,bytes,bytes)": {
        "params": {
          "_buildMetadata": "The build metadata URI.",
          "_pluginSetupAddress": "The address of the plugin setup contract.",
          "_release": "The release number.",
          "_releaseMetadata": "The release metadata URI."
        }
      },
      "getLatestVersion(address)": {
        "params": {
          "_pluginSetup": "The plugin setup address"
        },
        "returns": {
          "_0": "The latest version associated with the plugin Setup."
        }
      },
      "getLatestVersion(uint8)": {
        "params": {
          "_release": "The release number."
        },
        "returns": {
          "_0": "The latest version of this release."
        }
      },
      "getVersion((uint8,uint16))": {
        "params": {
          "_tag": "The version tag."
        },
        "returns": {
          "_0": "The version associated with the tag."
        }
      },
      "getVersion(bytes32)": {
        "params": {
          "_tagHash": "The tag hash."
        },
        "returns": {
          "_0": "The version associated with a tag hash."
        }
      },
      "grant(address,address,bytes32)": {
        "details": "Requires the `ROOT_PERMISSION_ID` permission.Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.",
        "params": {
          "_permissionId": "The permission identifier.",
          "_where": "The address of the target contract for which `_who` receives permission.",
          "_who": "The address (EOA or contract) receiving the permission."
        }
      },
      "grantWithCondition(address,address,bytes32,address)": {
        "details": "Requires the `ROOT_PERMISSION_ID` permissionNote, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.",
        "params": {
          "_condition": "The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.",
          "_permissionId": "The permission identifier.",
          "_where": "The address of the target contract for which `_who` receives permission.",
          "_who": "The address (EOA or contract) receiving the permission."
        }
      },
      "initialize(address)": {
        "details": "This method is required to support [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)."
      },
      "isGranted(address,address,bytes32,bytes)": {
        "params": {
          "_data": "The optional data passed to the `PermissionCondition` registered.",
          "_permissionId": "The permission identifier.",
          "_where": "The address of the target contract for which `_who` receives permission.",
          "_who": "The address (EOA or contract) for which the permission is checked."
        },
        "returns": {
          "_0": "Returns true if `_who` has the permissions on the target contract via the specified permission identifier."
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "revoke(address,address,bytes32)": {
        "details": "Requires the `ROOT_PERMISSION_ID` permission.Note, that revoking permissions with `_who` or `_where` equal to `ANY_ADDR` does not revoke other permissions with specific `_who` and `_where` addresses that exist in parallel.",
        "params": {
          "_permissionId": "The permission identifier.",
          "_where": "The address of the target contract for which `_who` loses permission.",
          "_who": "The address (EOA or contract) losing the permission."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceId": "The ID of the interface."
        },
        "returns": {
          "_0": "Returns `true` if the interface is supported."
        }
      },
      "updateReleaseMetadata(uint8,bytes)": {
        "params": {
          "_release": "The release number.",
          "_releaseMetadata": "The release metadata URI."
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "latestRelease": {
        "details": "The maximum release number is 255."
      }
    },
    "title": "PluginRepo",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AnyAddressDisallowedForWhoAndWhere()": [
        {
          "notice": "Thrown for permission grants where `who` and `where` are both `ANY_ADDR`."
        }
      ],
      "ConditionNotPresentForAnyAddress()": [
        {
          "notice": "Thrown for permission grants where `who` or `where` is `ANY_ADDR`, but no condition is present."
        }
      ],
      "EmptyReleaseMetadata()": [
        {
          "notice": "Thrown if the metadata URI is empty."
        }
      ],
      "InvalidPluginSetupInterface()": [
        {
          "notice": "Thrown if a plugin setup contract does not inherit from `PluginSetup`."
        }
      ],
      "InvalidReleaseIncrement(uint8,uint8)": [
        {
          "notice": "Thrown if a release number is incremented by more than one."
        }
      ],
      "PermissionAlreadyGrantedForDifferentCondition(address,address,bytes32,address,address)": [
        {
          "notice": "Thrown if a permission has been already granted with a different condition."
        }
      ],
      "PermissionsForAnyAddressDisallowed()": [
        {
          "notice": "Thrown for `ROOT_PERMISSION_ID` or `EXECUTE_PERMISSION_ID` permission grants where `who` or `where` is `ANY_ADDR`."
        }
      ],
      "PluginSetupAlreadyInPreviousRelease(uint8,uint16,address)": [
        {
          "notice": "Thrown if the same plugin setup contract exists already in a previous releases."
        }
      ],
      "ReleaseDoesNotExist()": [
        {
          "notice": "Thrown if release does not exist."
        }
      ],
      "ReleaseZeroNotAllowed()": [
        {
          "notice": "Thrown if a release number is zero."
        }
      ],
      "Unauthorized(address,address,bytes32)": [
        {
          "notice": "Thrown if a call is unauthorized."
        }
      ],
      "VersionHashDoesNotExist(bytes32)": [
        {
          "notice": "Thrown if a version does not exist."
        }
      ]
    },
    "events": {
      "Granted(bytes32,address,address,address,address)": {
        "notice": "Emitted when a permission `permission` is granted in the context `here` to the address `_who` for the contract `_where`."
      },
      "ReleaseMetadataUpdated(uint8,bytes)": {
        "notice": "Thrown when a release's metadata was updated."
      },
      "Revoked(bytes32,address,address,address)": {
        "notice": "Emitted when a permission `permission` is revoked in the context `here` from the address `_who` for the contract `_where`."
      },
      "VersionCreated(uint8,uint16,address,bytes)": {
        "notice": "Thrown if the same plugin setup exists in previous releases."
      }
    },
    "kind": "user",
    "methods": {
      "MAINTAINER_PERMISSION_ID()": {
        "notice": "The ID of the permission required to call the `createVersion` function."
      },
      "ROOT_PERMISSION_ID()": {
        "notice": "The ID of the permission required to call the `grant`, `grantWithCondition`, `revoke`, and `bulk` function."
      },
      "UPGRADE_REPO_PERMISSION_ID()": {
        "notice": "The ID of the permission required to call the `createVersion` function."
      },
      "applyMultiTargetPermissions((uint8,address,address,address,bytes32)[])": {
        "notice": "Applies an array of permission operations on multiple target contracts `items[i].where`."
      },
      "applySingleTargetPermissions(address,(uint8,address,bytes32)[])": {
        "notice": "Applies an array of permission operations on a single target contracts `_where`."
      },
      "buildCount(uint8)": {
        "notice": "Gets the total number of builds for a given release number."
      },
      "createVersion(uint8,address,bytes,bytes)": {
        "notice": "Creates a new plugin version as the latest build for an existing release number or the first build for a new release number for the provided `PluginSetup` contract address and metadata."
      },
      "getLatestVersion(address)": {
        "notice": "Returns the latest version for a given plugin setup."
      },
      "getLatestVersion(uint8)": {
        "notice": "Returns the latest version for a given release number."
      },
      "getVersion((uint8,uint16))": {
        "notice": "Returns the version associated with a tag."
      },
      "getVersion(bytes32)": {
        "notice": "Returns the version for a tag hash."
      },
      "grant(address,address,bytes32)": {
        "notice": "Grants permission to an address to call methods in a contract guarded by an auth modifier with the specified permission identifier."
      },
      "grantWithCondition(address,address,bytes32,address)": {
        "notice": "Grants permission to an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier if the referenced condition permits it."
      },
      "initialize(address)": {
        "notice": "Initializes the contract by - initializing the permission manager - granting the `MAINTAINER_PERMISSION_ID` permission to the initial owner."
      },
      "isGranted(address,address,bytes32,bytes)": {
        "notice": "Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process."
      },
      "latestRelease()": {
        "notice": "The ID of the latest release."
      },
      "revoke(address,address,bytes32)": {
        "notice": "Revokes permission from an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier."
      },
      "supportsInterface(bytes4)": {
        "notice": "Checks if this or the parent contract supports an interface by its ID."
      },
      "updateReleaseMetadata(uint8,bytes)": {
        "notice": "Updates the metadata for release with content `@fromHex(_releaseMetadata)`."
      }
    },
    "notice": "The plugin repository contract required for managing and publishing different plugin versions within the Aragon DAO framework.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6275,
        "contract": "src/framework/plugin/repo/PluginRepo.sol:PluginRepo",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 6278,
        "contract": "src/framework/plugin/repo/PluginRepo.sol:PluginRepo",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13460,
        "contract": "src/framework/plugin/repo/PluginRepo.sol:PluginRepo",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6257,
        "contract": "src/framework/plugin/repo/PluginRepo.sol:PluginRepo",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6572,
        "contract": "src/framework/plugin/repo/PluginRepo.sol:PluginRepo",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 22976,
        "contract": "src/framework/plugin/repo/PluginRepo.sol:PluginRepo",
        "label": "permissionsHashed",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 23638,
        "contract": "src/framework/plugin/repo/PluginRepo.sol:PluginRepo",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25225,
        "contract": "src/framework/plugin/repo/PluginRepo.sol:PluginRepo",
        "label": "buildsPerRelease",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint8,t_uint16)"
      },
      {
        "astId": 25231,
        "contract": "src/framework/plugin/repo/PluginRepo.sol:PluginRepo",
        "label": "versions",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_bytes32,t_struct(Version)25208_storage)"
      },
      {
        "astId": 25236,
        "contract": "src/framework/plugin/repo/PluginRepo.sol:PluginRepo",
        "label": "latestTagHashForPluginSetup",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 25239,
        "contract": "src/framework/plugin/repo/PluginRepo.sol:PluginRepo",
        "label": "latestRelease",
        "offset": 0,
        "slot": "204",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(Version)25208_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PluginRepo.Version)",
        "numberOfBytes": "32",
        "value": "t_struct(Version)25208_storage"
      },
      "t_mapping(t_uint8,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_struct(Tag)25200_storage": {
        "encoding": "inplace",
        "label": "struct PluginRepo.Tag",
        "members": [
          {
            "astId": 25197,
            "contract": "src/framework/plugin/repo/PluginRepo.sol:PluginRepo",
            "label": "release",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 25199,
            "contract": "src/framework/plugin/repo/PluginRepo.sol:PluginRepo",
            "label": "build",
            "offset": 1,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Version)25208_storage": {
        "encoding": "inplace",
        "label": "struct PluginRepo.Version",
        "members": [
          {
            "astId": 25203,
            "contract": "src/framework/plugin/repo/PluginRepo.sol:PluginRepo",
            "label": "tag",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Tag)25200_storage"
          },
          {
            "astId": 25205,
            "contract": "src/framework/plugin/repo/PluginRepo.sol:PluginRepo",
            "label": "pluginSetup",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 25207,
            "contract": "src/framework/plugin/repo/PluginRepo.sol:PluginRepo",
            "label": "buildMetadata",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}