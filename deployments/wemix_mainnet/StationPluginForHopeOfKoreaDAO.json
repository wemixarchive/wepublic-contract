{
  "address": "0xeEd52230748E206DbbBB52262BF0A866c9FBC689",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "where",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "permissionId",
          "type": "bytes32"
        }
      ],
      "name": "DaoUnauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "STATION_EXECUTOR_PERMISSION_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STATION_UPDATOR_PERMISSION_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_PLUGIN_PERMISSION_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "addMembershipRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dao",
      "outputs": [
        {
          "internalType": "contract IDAO",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "grantMembership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDAO",
          "name": "_dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_membershipToken",
          "type": "address"
        }
      ],
      "name": "initializeBuild1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "membershipToken",
      "outputs": [
        {
          "internalType": "contract IMembershipToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pluginType",
      "outputs": [
        {
          "internalType": "enum IPlugin.PluginType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "removeMembershipRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "revokeMembership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "setMembershipRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "upgradeMembershipToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "dcb4cc8b7e5c749e95c1977b57e7355c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"name\":\"DaoUnauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"STATION_EXECUTOR_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATION_UPDATOR_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_PLUGIN_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"addMembershipRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"contract IDAO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"grantMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDAO\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_membershipToken\",\"type\":\"address\"}],\"name\":\"initializeBuild1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"membershipToken\",\"outputs\":[{\"internalType\":\"contract IMembershipToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pluginType\",\"outputs\":[{\"internalType\":\"enum IPlugin.PluginType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"removeMembershipRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"revokeMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"setMembershipRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgradeMembershipToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mesehr\",\"details\":\"This contract is upgradable.\",\"errors\":{\"DaoUnauthorized(address,address,address,bytes32)\":[{\"params\":{\"dao\":\"The associated DAO.\",\"permissionId\":\"The permission identifier.\",\"where\":\"The context in which the authorization reverted.\",\"who\":\"The address (EOA or contract) missing the permission.\"}}]},\"kind\":\"dev\",\"methods\":{\"addMembershipRole(bytes32)\":{\"details\":\"The caller must have the `STATION_EXECUTOR_PERMISSION_ID` permission.\",\"params\":{\"role\":\"The role to add.\"}},\"dao()\":{\"returns\":{\"_0\":\"The DAO contract.\"}},\"grantMembership(address,bytes32)\":{\"details\":\"The caller must have the `STATION_EXECUTOR_PERMISSION_ID` permission.\",\"params\":{\"owner\":\"The DAO contract.\",\"role\":\"The role to grant membership for.\"}},\"implementation()\":{\"returns\":{\"_0\":\"The address of the implementation contract.\"}},\"initializeBuild1(address,address)\":{\"params\":{\"_dao\":\"The DAO contract.\",\"_membershipToken\":\"The Membership Token.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"removeMembershipRole(bytes32)\":{\"details\":\"The caller must have the `STATION_EXECUTOR_PERMISSION_ID` permission.\",\"params\":{\"role\":\"The role to remove.\"}},\"revokeMembership(uint256,address)\":{\"details\":\"The caller must have the `STATION_EXECUTOR_PERMISSION_ID` permission.\",\"params\":{\"to\":\"Address of a DAO member whose membership is revoked .\",\"tokenId\":\"TokenId assgined for each DAO member .\"}},\"setMembershipRole(uint256,bytes32)\":{\"details\":\"The caller must have the `STATION_EXECUTOR_PERMISSION_ID` permission.\",\"params\":{\"role\":\"The role to set membership for.\",\"tokenId\":\"TokenId assgined for each DAO member .\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"The ID of the interface.\"},\"returns\":{\"_0\":\"Returns `true` if the interface is supported.\"}},\"upgradeMembershipToken(address)\":{\"details\":\"The caller must have the `STATION_UPDATOR_PERMISSION_ID` permission.\",\"params\":{\"implementation\":\"Address of a new implementation contract.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"StationBuild1\",\"version\":1},\"userdoc\":{\"errors\":{\"DaoUnauthorized(address,address,address,bytes32)\":[{\"notice\":\"Thrown if a call is unauthorized in the associated DAO.\"}]},\"kind\":\"user\",\"methods\":{\"STATION_EXECUTOR_PERMISSION_ID()\":{\"notice\":\"The ID of the permission required to call the `grantMembership`, `setMembershipRole`, `revokeMembership` function.\"},\"STATION_UPDATOR_PERMISSION_ID()\":{\"notice\":\"The ID of the permission required to call the `updateMembershipToken` function.\"},\"UPGRADE_PLUGIN_PERMISSION_ID()\":{\"notice\":\"The ID of the permission required to call the `_authorizeUpgrade` function.\"},\"addMembershipRole(bytes32)\":{\"notice\":\"Adds a membership role.\"},\"dao()\":{\"notice\":\"Returns the DAO contract.\"},\"grantMembership(address,bytes32)\":{\"notice\":\"Grants membership to a member of a DAO.\"},\"implementation()\":{\"notice\":\"Returns the address of the implementation contract in the [proxy storage slot](https://eips.ethereum.org/EIPS/eip-1967) slot the [UUPS proxy](https://eips.ethereum.org/EIPS/eip-1822) is pointing to.\"},\"initializeBuild1(address,address)\":{\"notice\":\"Initializes the station-plugin by storing a associated DAO and a related membership token.\"},\"pluginType()\":{\"notice\":\"Returns the plugin's type\"},\"removeMembershipRole(bytes32)\":{\"notice\":\"Removes a membership role.\"},\"revokeMembership(uint256,address)\":{\"notice\":\"Revokes membership of a member.\"},\"setMembershipRole(uint256,bytes32)\":{\"notice\":\"Sets a membership role.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Checks if an interface is supported by this or its parent contract.\"},\"upgradeMembershipToken(address)\":{\"notice\":\"Upgrades a membership token.\"}},\"notice\":\"This contract is deployed by the DAO and is used to grant, revoke and set membership roles for the DAO.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/plugins/wepublic/station/StationBuild1.sol\":\"StationBuild1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"src/core/dao/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title IDAO\\n/// @author Aragon Association - 2022-2023\\n/// @notice The interface required for DAOs within the Aragon App DAO framework.\\ninterface IDAO {\\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\\n    /// @param to The address to call.\\n    /// @param value The native token value to be sent with the call.\\n    /// @param data The bytes-encoded function selector and calldata for the call.\\n    struct Action {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the contract.\\n    /// @param _who The address of a EOA or contract to give the permissions.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if the address has permission, false if not.\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) external view returns (bool);\\n\\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\\n    /// @param _metadata The IPFS hash of the new metadata object.\\n    function setMetadata(bytes calldata _metadata) external;\\n\\n    /// @notice Emitted when the DAO metadata is updated.\\n    /// @param metadata The IPFS hash of the new metadata object.\\n    event MetadataSet(bytes metadata);\\n\\n    /// @notice Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\\n    /// @param _actions The array of actions.\\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\\n    /// @return The array of results obtained from the executed actions in `bytes`.\\n    /// @return The resulting failure map containing the actions have actually failed.\\n    function execute(\\n        bytes32 _callId,\\n        Action[] memory _actions,\\n        uint256 _allowFailureMap\\n    ) external returns (bytes[] memory, uint256);\\n\\n    /// @notice Emitted when a proposal is executed.\\n    /// @param actor The address of the caller.\\n    /// @param callId The ID of the call.\\n    /// @param actions The array of actions executed.\\n    /// @param allowFailureMap The allow failure map encoding which actions are allowed to fail.\\n    /// @param failureMap The failure map encoding which actions have failed.\\n    /// @param execResults The array with the results of the executed actions.\\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\\n    event Executed(\\n        address indexed actor,\\n        bytes32 callId,\\n        Action[] actions,\\n        uint256 allowFailureMap,\\n        uint256 failureMap,\\n        bytes[] execResults\\n    );\\n\\n    /// @notice Emitted when a standard callback is registered.\\n    /// @param interfaceId The ID of the interface.\\n    /// @param callbackSelector The selector of the callback function.\\n    /// @param magicNumber The magic number to be registered for the callback function selector.\\n    event StandardCallbackRegistered(bytes4 interfaceId, bytes4 callbackSelector, bytes4 magicNumber);\\n\\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\\n    /// @param _token The address of the token or address(0) in case of the native token.\\n    /// @param _amount The amount of tokens to deposit.\\n    /// @param _reference The reference describing the deposit reason.\\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\\n\\n    /// @notice Emitted when a token deposit has been made to the DAO.\\n    /// @param sender The address of the sender.\\n    /// @param token The address of the deposited token.\\n    /// @param amount The amount of tokens deposited.\\n    /// @param _reference The reference describing the deposit reason.\\n    event Deposited(address indexed sender, address indexed token, uint256 amount, string _reference);\\n\\n    /// @notice Emitted when a native token deposit has been made to the DAO.\\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\\n    /// @param sender The address of the sender.\\n    /// @param amount The amount of native tokens deposited.\\n    event NativeTokenDeposited(address sender, uint256 amount);\\n\\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\\n    /// @param _trustedForwarder The trusted forwarder address.\\n    function setTrustedForwarder(address _trustedForwarder) external;\\n\\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\\n    /// @return The trusted forwarder address.\\n    function getTrustedForwarder() external view returns (address);\\n\\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\\n    /// @param forwarder the new forwarder address.\\n    event TrustedForwarderSet(address forwarder);\\n\\n    /// @notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _signatureValidator The address of the signature validator.\\n    function setSignatureValidator(address _signatureValidator) external;\\n\\n    /// @notice Emitted when the signature validator address is updated.\\n    /// @param signatureValidator The address of the signature validator.\\n    event SignatureValidatorSet(address signatureValidator);\\n\\n    /// @notice Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _hash The hash of the data to be signed.\\n    /// @param _signature The signature byte array associated with `_hash`.\\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\\n\\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @param _callbackSelector The selector of the callback function.\\n    /// @param _magicNumber The magic number to be registered for the function signature.\\n    function registerStandardCallback(bytes4 _interfaceId, bytes4 _callbackSelector, bytes4 _magicNumber) external;\\n}\\n\",\"keccak256\":\"0xf4951ef4ea5ceef539e9d824379e0a5d6aa306858102277dcb1029735318f2f8\",\"license\":\"AGPL-3.0-or-later\"},\"src/core/plugin/IPlugin.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title IPlugin\\n/// @author Aragon Association - 2022-2023\\n/// @notice An interface defining the traits of a plugin.\\ninterface IPlugin {\\n    enum PluginType {\\n        UUPS,\\n        Cloneable,\\n        Constructable\\n    }\\n\\n    /// @notice Returns the plugin's type\\n    function pluginType() external view returns (PluginType);\\n}\\n\",\"keccak256\":\"0xcdb72c04ca35478e4d786fbbe12cf0e6de7d76aa0510028432312697f42c7355\",\"license\":\"AGPL-3.0-or-later\"},\"src/core/plugin/PluginUUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {IERC1822ProxiableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\n\\nimport {IDAO} from \\\"../dao/IDAO.sol\\\";\\nimport {DaoAuthorizableUpgradeable} from \\\"./dao-authorizable/DaoAuthorizableUpgradeable.sol\\\";\\nimport {IPlugin} from \\\"./IPlugin.sol\\\";\\n\\n/// @title PluginUUPSUpgradeable\\n/// @author Aragon Association - 2022-2023\\n/// @notice An abstract, upgradeable contract to inherit from when creating a plugin being deployed via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\nabstract contract PluginUUPSUpgradeable is\\n    IPlugin,\\n    ERC165Upgradeable,\\n    UUPSUpgradeable,\\n    DaoAuthorizableUpgradeable\\n{\\n    // NOTE: When adding new state variables to the contract, the size of `_gap` has to be adapted below as well.\\n\\n    /// @notice Disables the initializers on the implementation contract to prevent it from being left uninitialized.\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @inheritdoc IPlugin\\n    function pluginType() public pure override returns (PluginType) {\\n        return PluginType.UUPS;\\n    }\\n\\n    /// @notice The ID of the permission required to call the `_authorizeUpgrade` function.\\n    bytes32 public constant UPGRADE_PLUGIN_PERMISSION_ID = keccak256(\\\"UPGRADE_PLUGIN_PERMISSION\\\");\\n\\n    /// @notice Initializes the plugin by storing the associated DAO.\\n    /// @param _dao The DAO contract.\\n    function __PluginUUPSUpgradeable_init(IDAO _dao) internal virtual onlyInitializing {\\n        __DaoAuthorizableUpgradeable_init(_dao);\\n    }\\n\\n    /// @notice Checks if an interface is supported by this or its parent contract.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @return Returns `true` if the interface is supported.\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return\\n            _interfaceId == type(IPlugin).interfaceId ||\\n            _interfaceId == type(IERC1822ProxiableUpgradeable).interfaceId ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n\\n    /// @notice Returns the address of the implementation contract in the [proxy storage slot](https://eips.ethereum.org/EIPS/eip-1967) slot the [UUPS proxy](https://eips.ethereum.org/EIPS/eip-1822) is pointing to.\\n    /// @return The address of the implementation contract.\\n    function implementation() public view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    /// @notice Internal method authorizing the upgrade of the contract via the [upgradeability mechanism for UUPS proxies](https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable) (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    /// @dev The caller must have the `UPGRADE_PLUGIN_PERMISSION_ID` permission.\\n    function _authorizeUpgrade(\\n        address\\n    ) internal virtual override auth(UPGRADE_PLUGIN_PERMISSION_ID) {}\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZeppelin's guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x5b12df9d646c59629dbaeb0a70df476a867a82887f5ef7d8b35697c01fcb45f3\",\"license\":\"AGPL-3.0-or-later\"},\"src/core/plugin/dao-authorizable/DaoAuthorizableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nimport {IDAO} from \\\"../../dao/IDAO.sol\\\";\\nimport {_auth} from \\\"../../utils/auth.sol\\\";\\n\\n/// @title DaoAuthorizableUpgradeable\\n/// @author Aragon Association - 2022-2023\\n/// @notice An abstract contract providing a meta-transaction compatible modifier for upgradeable or cloneable contracts to authorize function calls through an associated DAO.\\n/// @dev Make sure to call `__DaoAuthorizableUpgradeable_init` during initialization of the inheriting contract.\\nabstract contract DaoAuthorizableUpgradeable is ContextUpgradeable {\\n    /// @notice The associated DAO managing the permissions of inheriting contracts.\\n    IDAO private dao_;\\n\\n    /// @notice Initializes the contract by setting the associated DAO.\\n    /// @param _dao The associated DAO address.\\n    function __DaoAuthorizableUpgradeable_init(IDAO _dao) internal onlyInitializing {\\n        dao_ = _dao;\\n    }\\n\\n    /// @notice Returns the DAO contract.\\n    /// @return The DAO contract.\\n    function dao() public view returns (IDAO) {\\n        return dao_;\\n    }\\n\\n    /// @notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through the associated DAO's permission manager.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    modifier auth(bytes32 _permissionId) {\\n        _auth(dao_, address(this), _msgSender(), _permissionId, _msgData());\\n        _;\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZeppelin's guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd21dcde806070ad8f62acc81d986e517edb5a60ebdff8419660763018f7895e8\",\"license\":\"AGPL-3.0-or-later\"},\"src/core/utils/auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {IDAO} from \\\"../dao/IDAO.sol\\\";\\n\\n/// @notice Thrown if a call is unauthorized in the associated DAO.\\n/// @param dao The associated DAO.\\n/// @param where The context in which the authorization reverted.\\n/// @param who The address (EOA or contract) missing the permission.\\n/// @param permissionId The permission identifier.\\nerror DaoUnauthorized(address dao, address where, address who, bytes32 permissionId);\\n\\n/// @notice A free function checking if a caller is granted permissions on a target contract via a permission identifier that redirects the approval to a `PermissionCondition` if this was specified in the setup.\\n/// @param _where The address of the target contract for which `who` receives permission.\\n/// @param _who The address (EOA or contract) owning the permission.\\n/// @param _permissionId The permission identifier.\\n/// @param _data The optional data passed to the `PermissionCondition` registered.\\nfunction _auth(\\n    IDAO _dao,\\n    address _where,\\n    address _who,\\n    bytes32 _permissionId,\\n    bytes calldata _data\\n) view {\\n    if (!_dao.hasPermission(_where, _who, _permissionId, _data))\\n        revert DaoUnauthorized({\\n            dao: address(_dao),\\n            where: _where,\\n            who: _who,\\n            permissionId: _permissionId\\n        });\\n}\\n\",\"keccak256\":\"0x1c9cf22583c8b5a08c6d2c02a68d9f05e58900a9bb27efa3b30abca2ecfabfe4\",\"license\":\"AGPL-3.0-or-later\"},\"src/interface/IUUPS.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\ninterface IUUPS {\\n    function upgradeTo(address) external;\\n}\\n\",\"keccak256\":\"0x4d42e21c76ff22dc7082ad914855a4ba2e78ba0f13c379b9750d36e8235b5991\",\"license\":\"AGPL-3.0-or-later\"},\"src/plugins/wepublic/station/IStation.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @title IStation\\n/// @author Mesher\\n/// @notice The interface for the Station plugin.\\n\\ninterface IStation {\\n    /// @notice Grants membership to a member of a DAO.\\n    /// @param owner The DAO contract.\\n    /// @param role The role to grant membership for.\\n    /// @dev The caller must have the `STATION_EXECUTOR_PERMISSION_ID` permission.\\n    function grantMembership(address owner, bytes32 role) external;\\n\\n    /// @notice Sets a membership level.\\n    /// @param tokenId tokenId assgined for each DAO member .\\n    /// @param role The role to set membership for.\\n    function setMembershipRole(uint256 tokenId, bytes32 role) external;\\n\\n    /// @notice Adds a membership role.\\n    /// @param role The role to add.\\n    function addMembershipRole(bytes32 role) external;\\n\\n    /// @notice Removes a membership role.\\n    /// @param role The role to remove.\\n    function removeMembershipRole(bytes32 role) external;\\n\\n    /// @notice Revokes membership of a member.\\n    /// @param tokenId tokenId assgined for each DAO member .\\n    /// @param to address of a DAO member whose membership is revoked .\\n    function revokeMembership(uint256 tokenId, address to) external;\\n}\\n\",\"keccak256\":\"0xbce245ca2091757ccf316ddbacaeac106ed32ced0f0e12be60eadf847b8e4e8f\",\"license\":\"AGPL-3.0-or-later\"},\"src/plugins/wepublic/station/StationBuild1.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport { PluginUUPSUpgradeable, IDAO } from \\\"../../../core/plugin/PluginUUPSUpgradeable.sol\\\";\\nimport \\\"./IStation.sol\\\";\\nimport \\\"../../../token/IMembershipToken.sol\\\";\\nimport { IUUPS } from \\\"../../../interface/IUUPS.sol\\\";\\n\\n/// @title StationBuild1\\n/// @author Mesehr\\n/// @notice This contract is deployed by the DAO and is used to grant, revoke and set membership roles for the DAO.\\n/// @dev This contract is upgradable.\\n\\ncontract StationBuild1 is IStation, PluginUUPSUpgradeable {\\n    IMembershipToken public membershipToken;\\n\\n    /// @notice The ID of the permission required to call the `grantMembership`, `setMembershipRole`, `revokeMembership` function.\\n    bytes32 public constant STATION_EXECUTOR_PERMISSION_ID = keccak256(\\\"STATION_EXECUTOR_PERMISSION\\\");\\n\\n    /// @notice The ID of the permission required to call the `updateMembershipToken` function.\\n    bytes32 public constant STATION_UPDATOR_PERMISSION_ID = keccak256(\\\"STATION_UPDATOR_PERMISSION\\\");\\n\\n    /// @notice Initializes the station-plugin by storing a associated DAO and a related membership token.\\n    /// @param _dao The DAO contract.\\n    /// @param _membershipToken The Membership Token.\\n    function initializeBuild1(IDAO _dao, address _membershipToken) external initializer {\\n        __PluginUUPSUpgradeable_init(_dao);\\n        membershipToken = IMembershipToken(_membershipToken);\\n    }\\n\\n    /// @notice A modifier to check if a memberhsip token is deployed.\\n    modifier tokenSet() {\\n        require(address(membershipToken) != address(0), \\\"Station.tokenSet : Membership token is not set\\\");\\n        _;\\n    }\\n\\n    /// @notice Grants membership to a member of a DAO.\\n    /// @param owner The DAO contract.\\n    /// @param role The role to grant membership for.\\n    /// @dev The caller must have the `STATION_EXECUTOR_PERMISSION_ID` permission.\\n    function grantMembership(address owner, bytes32 role) external tokenSet auth(STATION_EXECUTOR_PERMISSION_ID) {\\n        require(membershipToken.getMembershipId(owner) == 0, \\\"Station.grantMembership : SBT exist already\\\"); // \\ud1a0\\ud070\\ub2e8\\uc5d0\\uc11c \\ud558\\uae30\\n\\n        membershipToken.mint(owner, role);\\n    }\\n\\n    /// @notice Sets a membership role.\\n    /// @param tokenId TokenId assgined for each DAO member .\\n    /// @param role The role to set membership for.\\n    /// @dev The caller must have the `STATION_EXECUTOR_PERMISSION_ID` permission.\\n    function setMembershipRole(uint256 tokenId, bytes32 role) external tokenSet auth(STATION_EXECUTOR_PERMISSION_ID) {\\n        membershipToken.setRole(tokenId, role);\\n    }\\n\\n    /// @notice Adds a membership role.\\n    /// @param role The role to add.\\n    /// @dev The caller must have the `STATION_EXECUTOR_PERMISSION_ID` permission.\\n    function addMembershipRole(bytes32 role) external auth(STATION_EXECUTOR_PERMISSION_ID) {\\n        membershipToken.addRole(role);\\n    }\\n\\n    /// @notice Removes a membership role.\\n    /// @param role The role to remove.\\n    /// @dev The caller must have the `STATION_EXECUTOR_PERMISSION_ID` permission.\\n    function removeMembershipRole(bytes32 role) external auth(STATION_EXECUTOR_PERMISSION_ID) {\\n        membershipToken.removeRole(role);\\n    }\\n\\n    /// @notice Revokes membership of a member.\\n    /// @param tokenId TokenId assgined for each DAO member .\\n    /// @param to Address of a DAO member whose membership is revoked .\\n    /// @dev The caller must have the `STATION_EXECUTOR_PERMISSION_ID` permission.\\n    function revokeMembership(uint256 tokenId, address to) external tokenSet auth(STATION_EXECUTOR_PERMISSION_ID) {\\n        require(membershipToken.getMembershipId(to) == tokenId, \\\"Station.revokeMembership : Token id mismatched\\\");\\n\\n        membershipToken.burn(tokenId);\\n    }\\n\\n    /// @notice Upgrades a membership token.\\n    /// @param implementation Address of a new implementation contract.\\n    /// @dev The caller must have the `STATION_UPDATOR_PERMISSION_ID` permission.\\n    function upgradeMembershipToken(address implementation) external auth(STATION_UPDATOR_PERMISSION_ID) {\\n        IUUPS(address(membershipToken)).upgradeTo(implementation);\\n    }\\n}\\n\",\"keccak256\":\"0x7dc2b3d3a4fd4fccd0a1220eeb8d9780f7352e422d7b9822e71fb0c56cfe1b10\",\"license\":\"AGPL-3.0-or-later\"},\"src/token/ERC5192/IERC5192.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.11;\\n\\ninterface IERC5192 {\\n    /// @notice Emitted when the locking status is changed to locked.\\n    /// @dev If a token is minted and the status is locked, this event should be emitted.\\n    /// @param tokenId The identifier for a token.\\n    event Locked(uint256 tokenId);\\n\\n    /// @notice Emitted when the locking status is changed to unlocked.\\n    /// @dev If a token is minted and the status is unlocked, this event should be emitted.\\n    /// @param tokenId The identifier for a token.\\n    event Unlocked(uint256 tokenId);\\n\\n    /// @notice Returns the locking status of an Soulbound Token\\n    /// @dev SBTs assigned to zero address are considered invalid, and queries\\n    /// about them do throw.\\n    /// @param tokenId The identifier for an SBT.\\n    function locked(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9fe0b86793f902d494fdff988b4bd0af432b63f51182794c2a4f0152de625c68\",\"license\":\"CC0-1.0\"},\"src/token/IMembershipToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.11;\\n\\nimport \\\"./ERC5192/IERC5192.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\n/// @title IMembershipToken\\n/// @notice Interface of Membership tokens.\\ninterface IMembershipToken is IERC5192, IERC721Upgradeable {\\n    event SetStation(address daoAddress, address indexed previousStation, address indexed newStation);\\n\\n    event SetBaseURI(address daoAddress, string previousBaseURI, string newBaseURI);\\n\\n    event Mint(address daoAddress, address indexed to, uint256 indexed tokenId, bytes32 role);\\n\\n    event SetRole(address daoAddress, uint256 indexed tokenId, bytes32 oldRole, bytes32 newRole);\\n\\n    event AddRole(address daoAddress, bytes32 indexed role);\\n\\n    event RemoveRole(address daoAddress, bytes32 indexed role);\\n\\n    event Burn(address daoAddress, uint256 indexed tokenId, address from);\\n\\n    function getMembershipId(address owner) external view returns (uint256);\\n\\n    function getRoles() external view returns (bytes32[] memory);\\n\\n    function getRole(uint256 tokenId) external view returns (bytes32);\\n\\n    function setStation(address _station) external;\\n\\n    function mint(address to, bytes32 role) external returns (uint256);\\n\\n    function setRole(uint256 tokenId, bytes32 role) external;\\n\\n    function addRole(bytes32 role) external;\\n\\n    function removeRole(bytes32 role) external;\\n\\n    function burn(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0xdaf4c81031fd18765aad706639d49fb914208dc01c181c2a2106beb6d72025c4\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516116846101196000396000818161057c015281816105bc0152818161064501528181610685015261070101526116846000f3fe6080604052600436106101095760003560e01c80635c60da1b11610095578063c9b07d1811610064578063c9b07d18146102d3578063c9c4bfca146102f3578063d97e2cdf14610327578063f4a8f52114610347578063f4e836cb1461036757600080fd5b80635c60da1b1461024957806362ad351b1461025e57806367ec635b1461027f578063c3465db1146102b357600080fd5b806341de6830116100dc57806341de6830146101b75780634f1ef286146101d357806352d1902d146101e65780635742fc1014610209578063592a221f1461022957600080fd5b806301ffc9a71461010e57806305b605c7146101435780633659cfe6146101655780634162169f14610185575b600080fd5b34801561011a57600080fd5b5061012e610129366004611189565b610389565b60405190151581526020015b60405180910390f35b34801561014f57600080fd5b5061016361015e3660046111c8565b6103db565b005b34801561017157600080fd5b506101636101803660046111f8565b610571565b34801561019157600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200161013a565b3480156101c357600080fd5b50600060405161013a9190611215565b6101636101e1366004611253565b61063a565b3480156101f257600080fd5b506101fb6106f4565b60405190815260200161013a565b34801561021557600080fd5b50610163610224366004611317565b6107a7565b34801561023557600080fd5b50610163610244366004611339565b610830565b34801561025557600080fd5b5061019f6109ce565b34801561026a57600080fd5b5061012d5461019f906001600160a01b031681565b34801561028b57600080fd5b506101fb7fd9185569d0407ee12a5141f338a0cec7c8e00851b3b02df406bf1e435b21d6f881565b3480156102bf57600080fd5b506101636102ce366004611365565b6109dd565b3480156102df57600080fd5b506101636102ee366004611393565b610b0d565b3480156102ff57600080fd5b506101fb7f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561033357600080fd5b506101636103423660046111f8565b610b98565b34801561035357600080fd5b50610163610362366004611393565b610c04565b34801561037357600080fd5b506101fb6000805160206115e883398151915281565b60006001600160e01b0319821663041de68360e41b14806103ba57506001600160e01b031982166352d1902d60e01b145b806103d557506301ffc9a760e01b6001600160e01b03198316145b92915050565b61012d546001600160a01b031661040d5760405162461bcd60e51b8152600401610404906113ac565b60405180910390fd5b60c9546000805160206115e883398151915290610439906001600160a01b031630335b84600036610c5d565b61012d54604051636500141f60e01b81526001600160a01b03848116600483015285921690636500141f90602401602060405180830381865afa158015610484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a891906113fa565b1461050c5760405162461bcd60e51b815260206004820152602e60248201527f53746174696f6e2e7265766f6b654d656d62657273686970203a20546f6b656e60448201526d081a59081b5a5cdb585d18da195960921b6064820152608401610404565b61012d54604051630852cd8d60e31b8152600481018590526001600160a01b03909116906342966c68906024015b600060405180830381600087803b15801561055457600080fd5b505af1158015610568573d6000803e3d6000fd5b50505050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105ba5760405162461bcd60e51b815260040161040490611413565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105ec610d11565b6001600160a01b0316146106125760405162461bcd60e51b81526004016104049061145f565b61061b81610d2d565b6040805160008082526020820190925261063791839190610d66565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156106835760405162461bcd60e51b815260040161040490611413565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106b5610d11565b6001600160a01b0316146106db5760405162461bcd60e51b81526004016104049061145f565b6106e482610d2d565b6106f082826001610d66565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107945760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610404565b5060008051602061160883398151915290565b61012d546001600160a01b03166107d05760405162461bcd60e51b8152600401610404906113ac565b60c9546000805160206115e8833981519152906107f7906001600160a01b03163033610430565b61012d54604051630cd13b2760e31b815260048101859052602481018490526001600160a01b0390911690636689d9389060440161053a565b61012d546001600160a01b03166108595760405162461bcd60e51b8152600401610404906113ac565b60c9546000805160206115e883398151915290610880906001600160a01b03163033610430565b61012d54604051636500141f60e01b81526001600160a01b03858116600483015290911690636500141f90602401602060405180830381865afa1580156108cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ef91906113fa565b156109505760405162461bcd60e51b815260206004820152602b60248201527f53746174696f6e2e6772616e744d656d62657273686970203a2053425420657860448201526a69737420616c726561647960a81b6064820152608401610404565b61012d54604051632cfd300560e01b81526001600160a01b0385811660048301526024820185905290911690632cfd3005906044016020604051808303816000875af11580156109a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c891906113fa565b50505050565b60006109d8610d11565b905090565b600054610100900460ff16158080156109fd5750600054600160ff909116105b80610a175750303b158015610a17575060005460ff166001145b610a7a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610404565b6000805460ff191660011790558015610a9d576000805461ff0019166101001790555b610aa683610ed1565b61012d80546001600160a01b0319166001600160a01b0384161790558015610b08576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60c9546000805160206115e883398151915290610b34906001600160a01b03163033610430565b61012d5460405163d0bf6d1560e01b8152600481018490526001600160a01b039091169063d0bf6d15906024015b600060405180830381600087803b158015610b7c57600080fd5b505af1158015610b90573d6000803e3d6000fd5b505050505050565b60c9547fd9185569d0407ee12a5141f338a0cec7c8e00851b3b02df406bf1e435b21d6f890610bd1906001600160a01b03163033610430565b61012d54604051631b2ce7f360e11b81526001600160a01b03848116600483015290911690633659cfe690602401610b62565b60c9546000805160206115e883398151915290610c2b906001600160a01b03163033610430565b61012d5460405163274b02a760e01b8152600481018490526001600160a01b039091169063274b02a790602401610b62565b604051637ef7c88360e11b81526001600160a01b0387169063fdef910690610c9190889088908890889088906004016114ab565b602060405180830381865afa158015610cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd291906114ff565b610b9057604051630cb6f8ed60e21b81526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610404565b600080516020611608833981519152546001600160a01b031690565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f5906106f0906001600160a01b03163033610430565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610d9957610b0883610f01565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610df3575060408051601f3d908101601f19168201909252610df0918101906113fa565b60015b610e565760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610404565b6000805160206116088339815191528114610ec55760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610404565b50610b08838383610f9d565b600054610100900460ff16610ef85760405162461bcd60e51b815260040161040490611521565b61063781610fc2565b6001600160a01b0381163b610f6e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610404565b60008051602061160883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b610fa68361100b565b600082511180610fb35750805b15610b08576109c8838361104b565b600054610100900460ff16610fe95760405162461bcd60e51b815260040161040490611521565b60c980546001600160a01b0319166001600160a01b0392909216919091179055565b61101481610f01565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6110b35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610404565b600080846001600160a01b0316846040516110ce9190611598565b600060405180830381855af49150503d8060008114611109576040519150601f19603f3d011682016040523d82523d6000602084013e61110e565b606091505b509150915061113682826040518060600160405280602781526020016116286027913961113f565b95945050505050565b6060831561114e575081611158565b611158838361115f565b9392505050565b81511561116f5781518083602001fd5b8060405162461bcd60e51b815260040161040491906115b4565b60006020828403121561119b57600080fd5b81356001600160e01b03198116811461115857600080fd5b6001600160a01b038116811461063757600080fd5b600080604083850312156111db57600080fd5b8235915060208301356111ed816111b3565b809150509250929050565b60006020828403121561120a57600080fd5b8135611158816111b3565b602081016003831061123757634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561126657600080fd5b8235611271816111b3565b9150602083013567ffffffffffffffff8082111561128e57600080fd5b818501915085601f8301126112a257600080fd5b8135818111156112b4576112b461123d565b604051601f8201601f19908116603f011681019083821181831017156112dc576112dc61123d565b816040528281528860208487010111156112f557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561132a57600080fd5b50508035926020909101359150565b6000806040838503121561134c57600080fd5b8235611357816111b3565b946020939093013593505050565b6000806040838503121561137857600080fd5b8235611383816111b3565b915060208301356111ed816111b3565b6000602082840312156113a557600080fd5b5035919050565b6020808252602e908201527f53746174696f6e2e746f6b656e536574203a204d656d6265727368697020746f60408201526d1ad95b881a5cc81b9bdd081cd95d60921b606082015260800190565b60006020828403121561140c57600080fd5b5051919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561151157600080fd5b8151801515811461115857600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b8381101561158757818101518382015260200161156f565b838111156109c85750506000910152565b600082516115aa81846020870161156c565b9190910192915050565b60208152600082518060208401526115d381604085016020870161156c565b601f01601f1916919091016040019291505056feda6a77e2e90dd19567c409a8a01136a3ba8ee9b4e4f98644991d64bac39621b1360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a2f21806a5cbd6a7d33ef7080c77f988bcaab3de03827eccffafba173e8823af64736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106101095760003560e01c80635c60da1b11610095578063c9b07d1811610064578063c9b07d18146102d3578063c9c4bfca146102f3578063d97e2cdf14610327578063f4a8f52114610347578063f4e836cb1461036757600080fd5b80635c60da1b1461024957806362ad351b1461025e57806367ec635b1461027f578063c3465db1146102b357600080fd5b806341de6830116100dc57806341de6830146101b75780634f1ef286146101d357806352d1902d146101e65780635742fc1014610209578063592a221f1461022957600080fd5b806301ffc9a71461010e57806305b605c7146101435780633659cfe6146101655780634162169f14610185575b600080fd5b34801561011a57600080fd5b5061012e610129366004611189565b610389565b60405190151581526020015b60405180910390f35b34801561014f57600080fd5b5061016361015e3660046111c8565b6103db565b005b34801561017157600080fd5b506101636101803660046111f8565b610571565b34801561019157600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200161013a565b3480156101c357600080fd5b50600060405161013a9190611215565b6101636101e1366004611253565b61063a565b3480156101f257600080fd5b506101fb6106f4565b60405190815260200161013a565b34801561021557600080fd5b50610163610224366004611317565b6107a7565b34801561023557600080fd5b50610163610244366004611339565b610830565b34801561025557600080fd5b5061019f6109ce565b34801561026a57600080fd5b5061012d5461019f906001600160a01b031681565b34801561028b57600080fd5b506101fb7fd9185569d0407ee12a5141f338a0cec7c8e00851b3b02df406bf1e435b21d6f881565b3480156102bf57600080fd5b506101636102ce366004611365565b6109dd565b3480156102df57600080fd5b506101636102ee366004611393565b610b0d565b3480156102ff57600080fd5b506101fb7f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b34801561033357600080fd5b506101636103423660046111f8565b610b98565b34801561035357600080fd5b50610163610362366004611393565b610c04565b34801561037357600080fd5b506101fb6000805160206115e883398151915281565b60006001600160e01b0319821663041de68360e41b14806103ba57506001600160e01b031982166352d1902d60e01b145b806103d557506301ffc9a760e01b6001600160e01b03198316145b92915050565b61012d546001600160a01b031661040d5760405162461bcd60e51b8152600401610404906113ac565b60405180910390fd5b60c9546000805160206115e883398151915290610439906001600160a01b031630335b84600036610c5d565b61012d54604051636500141f60e01b81526001600160a01b03848116600483015285921690636500141f90602401602060405180830381865afa158015610484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a891906113fa565b1461050c5760405162461bcd60e51b815260206004820152602e60248201527f53746174696f6e2e7265766f6b654d656d62657273686970203a20546f6b656e60448201526d081a59081b5a5cdb585d18da195960921b6064820152608401610404565b61012d54604051630852cd8d60e31b8152600481018590526001600160a01b03909116906342966c68906024015b600060405180830381600087803b15801561055457600080fd5b505af1158015610568573d6000803e3d6000fd5b50505050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105ba5760405162461bcd60e51b815260040161040490611413565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105ec610d11565b6001600160a01b0316146106125760405162461bcd60e51b81526004016104049061145f565b61061b81610d2d565b6040805160008082526020820190925261063791839190610d66565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156106835760405162461bcd60e51b815260040161040490611413565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106b5610d11565b6001600160a01b0316146106db5760405162461bcd60e51b81526004016104049061145f565b6106e482610d2d565b6106f082826001610d66565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107945760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610404565b5060008051602061160883398151915290565b61012d546001600160a01b03166107d05760405162461bcd60e51b8152600401610404906113ac565b60c9546000805160206115e8833981519152906107f7906001600160a01b03163033610430565b61012d54604051630cd13b2760e31b815260048101859052602481018490526001600160a01b0390911690636689d9389060440161053a565b61012d546001600160a01b03166108595760405162461bcd60e51b8152600401610404906113ac565b60c9546000805160206115e883398151915290610880906001600160a01b03163033610430565b61012d54604051636500141f60e01b81526001600160a01b03858116600483015290911690636500141f90602401602060405180830381865afa1580156108cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ef91906113fa565b156109505760405162461bcd60e51b815260206004820152602b60248201527f53746174696f6e2e6772616e744d656d62657273686970203a2053425420657860448201526a69737420616c726561647960a81b6064820152608401610404565b61012d54604051632cfd300560e01b81526001600160a01b0385811660048301526024820185905290911690632cfd3005906044016020604051808303816000875af11580156109a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c891906113fa565b50505050565b60006109d8610d11565b905090565b600054610100900460ff16158080156109fd5750600054600160ff909116105b80610a175750303b158015610a17575060005460ff166001145b610a7a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610404565b6000805460ff191660011790558015610a9d576000805461ff0019166101001790555b610aa683610ed1565b61012d80546001600160a01b0319166001600160a01b0384161790558015610b08576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60c9546000805160206115e883398151915290610b34906001600160a01b03163033610430565b61012d5460405163d0bf6d1560e01b8152600481018490526001600160a01b039091169063d0bf6d15906024015b600060405180830381600087803b158015610b7c57600080fd5b505af1158015610b90573d6000803e3d6000fd5b505050505050565b60c9547fd9185569d0407ee12a5141f338a0cec7c8e00851b3b02df406bf1e435b21d6f890610bd1906001600160a01b03163033610430565b61012d54604051631b2ce7f360e11b81526001600160a01b03848116600483015290911690633659cfe690602401610b62565b60c9546000805160206115e883398151915290610c2b906001600160a01b03163033610430565b61012d5460405163274b02a760e01b8152600481018490526001600160a01b039091169063274b02a790602401610b62565b604051637ef7c88360e11b81526001600160a01b0387169063fdef910690610c9190889088908890889088906004016114ab565b602060405180830381865afa158015610cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd291906114ff565b610b9057604051630cb6f8ed60e21b81526001600160a01b03808816600483015280871660248301528516604482015260648101849052608401610404565b600080516020611608833981519152546001600160a01b031690565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f5906106f0906001600160a01b03163033610430565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610d9957610b0883610f01565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610df3575060408051601f3d908101601f19168201909252610df0918101906113fa565b60015b610e565760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610404565b6000805160206116088339815191528114610ec55760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610404565b50610b08838383610f9d565b600054610100900460ff16610ef85760405162461bcd60e51b815260040161040490611521565b61063781610fc2565b6001600160a01b0381163b610f6e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610404565b60008051602061160883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b610fa68361100b565b600082511180610fb35750805b15610b08576109c8838361104b565b600054610100900460ff16610fe95760405162461bcd60e51b815260040161040490611521565b60c980546001600160a01b0319166001600160a01b0392909216919091179055565b61101481610f01565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6110b35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610404565b600080846001600160a01b0316846040516110ce9190611598565b600060405180830381855af49150503d8060008114611109576040519150601f19603f3d011682016040523d82523d6000602084013e61110e565b606091505b509150915061113682826040518060600160405280602781526020016116286027913961113f565b95945050505050565b6060831561114e575081611158565b611158838361115f565b9392505050565b81511561116f5781518083602001fd5b8060405162461bcd60e51b815260040161040491906115b4565b60006020828403121561119b57600080fd5b81356001600160e01b03198116811461115857600080fd5b6001600160a01b038116811461063757600080fd5b600080604083850312156111db57600080fd5b8235915060208301356111ed816111b3565b809150509250929050565b60006020828403121561120a57600080fd5b8135611158816111b3565b602081016003831061123757634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561126657600080fd5b8235611271816111b3565b9150602083013567ffffffffffffffff8082111561128e57600080fd5b818501915085601f8301126112a257600080fd5b8135818111156112b4576112b461123d565b604051601f8201601f19908116603f011681019083821181831017156112dc576112dc61123d565b816040528281528860208487010111156112f557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561132a57600080fd5b50508035926020909101359150565b6000806040838503121561134c57600080fd5b8235611357816111b3565b946020939093013593505050565b6000806040838503121561137857600080fd5b8235611383816111b3565b915060208301356111ed816111b3565b6000602082840312156113a557600080fd5b5035919050565b6020808252602e908201527f53746174696f6e2e746f6b656e536574203a204d656d6265727368697020746f60408201526d1ad95b881a5cc81b9bdd081cd95d60921b606082015260800190565b60006020828403121561140c57600080fd5b5051919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561151157600080fd5b8151801515811461115857600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b8381101561158757818101518382015260200161156f565b838111156109c85750506000910152565b600082516115aa81846020870161156c565b9190910192915050565b60208152600082518060208401526115d381604085016020870161156c565b601f01601f1916919091016040019291505056feda6a77e2e90dd19567c409a8a01136a3ba8ee9b4e4f98644991d64bac39621b1360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a2f21806a5cbd6a7d33ef7080c77f988bcaab3de03827eccffafba173e8823af64736f6c634300080b0033",
  "devdoc": {
    "author": "Mesehr",
    "details": "This contract is upgradable.",
    "errors": {
      "DaoUnauthorized(address,address,address,bytes32)": [
        {
          "params": {
            "dao": "The associated DAO.",
            "permissionId": "The permission identifier.",
            "where": "The context in which the authorization reverted.",
            "who": "The address (EOA or contract) missing the permission."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addMembershipRole(bytes32)": {
        "details": "The caller must have the `STATION_EXECUTOR_PERMISSION_ID` permission.",
        "params": {
          "role": "The role to add."
        }
      },
      "dao()": {
        "returns": {
          "_0": "The DAO contract."
        }
      },
      "grantMembership(address,bytes32)": {
        "details": "The caller must have the `STATION_EXECUTOR_PERMISSION_ID` permission.",
        "params": {
          "owner": "The DAO contract.",
          "role": "The role to grant membership for."
        }
      },
      "implementation()": {
        "returns": {
          "_0": "The address of the implementation contract."
        }
      },
      "initializeBuild1(address,address)": {
        "params": {
          "_dao": "The DAO contract.",
          "_membershipToken": "The Membership Token."
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "removeMembershipRole(bytes32)": {
        "details": "The caller must have the `STATION_EXECUTOR_PERMISSION_ID` permission.",
        "params": {
          "role": "The role to remove."
        }
      },
      "revokeMembership(uint256,address)": {
        "details": "The caller must have the `STATION_EXECUTOR_PERMISSION_ID` permission.",
        "params": {
          "to": "Address of a DAO member whose membership is revoked .",
          "tokenId": "TokenId assgined for each DAO member ."
        }
      },
      "setMembershipRole(uint256,bytes32)": {
        "details": "The caller must have the `STATION_EXECUTOR_PERMISSION_ID` permission.",
        "params": {
          "role": "The role to set membership for.",
          "tokenId": "TokenId assgined for each DAO member ."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceId": "The ID of the interface."
        },
        "returns": {
          "_0": "Returns `true` if the interface is supported."
        }
      },
      "upgradeMembershipToken(address)": {
        "details": "The caller must have the `STATION_UPDATOR_PERMISSION_ID` permission.",
        "params": {
          "implementation": "Address of a new implementation contract."
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "StationBuild1",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "DaoUnauthorized(address,address,address,bytes32)": [
        {
          "notice": "Thrown if a call is unauthorized in the associated DAO."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "STATION_EXECUTOR_PERMISSION_ID()": {
        "notice": "The ID of the permission required to call the `grantMembership`, `setMembershipRole`, `revokeMembership` function."
      },
      "STATION_UPDATOR_PERMISSION_ID()": {
        "notice": "The ID of the permission required to call the `updateMembershipToken` function."
      },
      "UPGRADE_PLUGIN_PERMISSION_ID()": {
        "notice": "The ID of the permission required to call the `_authorizeUpgrade` function."
      },
      "addMembershipRole(bytes32)": {
        "notice": "Adds a membership role."
      },
      "dao()": {
        "notice": "Returns the DAO contract."
      },
      "grantMembership(address,bytes32)": {
        "notice": "Grants membership to a member of a DAO."
      },
      "implementation()": {
        "notice": "Returns the address of the implementation contract in the [proxy storage slot](https://eips.ethereum.org/EIPS/eip-1967) slot the [UUPS proxy](https://eips.ethereum.org/EIPS/eip-1822) is pointing to."
      },
      "initializeBuild1(address,address)": {
        "notice": "Initializes the station-plugin by storing a associated DAO and a related membership token."
      },
      "pluginType()": {
        "notice": "Returns the plugin's type"
      },
      "removeMembershipRole(bytes32)": {
        "notice": "Removes a membership role."
      },
      "revokeMembership(uint256,address)": {
        "notice": "Revokes membership of a member."
      },
      "setMembershipRole(uint256,bytes32)": {
        "notice": "Sets a membership role."
      },
      "supportsInterface(bytes4)": {
        "notice": "Checks if an interface is supported by this or its parent contract."
      },
      "upgradeMembershipToken(address)": {
        "notice": "Upgrades a membership token."
      }
    },
    "notice": "This contract is deployed by the DAO and is used to grant, revoke and set membership roles for the DAO.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1079,
        "contract": "src/plugins/wepublic/station/StationBuild1.sol:StationBuild1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1082,
        "contract": "src/plugins/wepublic/station/StationBuild1.sol:StationBuild1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6448,
        "contract": "src/plugins/wepublic/station/StationBuild1.sol:StationBuild1",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1061,
        "contract": "src/plugins/wepublic/station/StationBuild1.sol:StationBuild1",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1376,
        "contract": "src/plugins/wepublic/station/StationBuild1.sol:StationBuild1",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5584,
        "contract": "src/plugins/wepublic/station/StationBuild1.sol:StationBuild1",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10434,
        "contract": "src/plugins/wepublic/station/StationBuild1.sol:StationBuild1",
        "label": "dao_",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IDAO)10250"
      },
      {
        "astId": 10483,
        "contract": "src/plugins/wepublic/station/StationBuild1.sol:StationBuild1",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10418,
        "contract": "src/plugins/wepublic/station/StationBuild1.sol:StationBuild1",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11633,
        "contract": "src/plugins/wepublic/station/StationBuild1.sol:StationBuild1",
        "label": "membershipToken",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IMembershipToken)13078"
      }
    ],
    "types": {
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDAO)10250": {
        "encoding": "inplace",
        "label": "contract IDAO",
        "numberOfBytes": "20"
      },
      "t_contract(IMembershipToken)13078": {
        "encoding": "inplace",
        "label": "contract IMembershipToken",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}